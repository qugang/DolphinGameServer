// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: A1001Response.txt
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace DolphinServer.ProtoEntity {

  namespace Proto {

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class A1001Response {

      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_A1001Response__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1001Response, global::DolphinServer.ProtoEntity.A1001Response.Builder> internal__static_A1001Response__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_A1001User__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1001User, global::DolphinServer.ProtoEntity.A1001User.Builder> internal__static_A1001User__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;

      static A1001Response() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChFBMTAwMVJlc3BvbnNlLnR4dCLwAgoNQTEwMDFSZXNwb25zZRIRCglFcnJv", 
              "ckluZm8YASABKAkSEQoJRXJyb3JDb2RlGAIgASgFEgsKA1VpZBgDIAEoCRIO", 
              "CgZSb29tSWQYBCABKAUSEAoIUm9vbVR5cGUYBSABKAUSEAoIWmhhbmdTaHUY", 
              "BiABKAUSDQoFSnVTaHUYByABKAUSGQoFVXNlcnMYCCADKAsyCi5BMTAwMVVz", 
              "ZXISDQoFSXNFbmQYCSABKAUSDwoHSXNGcmlzdBgKIAEoBRISCgpDdXJyZW50", 
              "VWlkGAsgASgJEhMKC0N1cnJlbnRDYXJkGAwgAygFEhUKDU5lZWRHYW5nRGFQ", 
              "YWkYDSADKAUSEAoISGFpZGlQYWkYDiABKAUSEAoITmlja05hbWUYDyABKAkS", 
              "EAoISW1hZ2VVcmwYECABKAkSEAoIUm9vbUNhcmQYESABKAUSFAoMRnJpZW5k", 
              "TnVtYmVyGBIgASgFEhAKCElzTGluZ1F1GBMgASgFIvwCCglBMTAwMVVzZXIS", 
              "CwoDVWlkGAEgASgJEhAKCGNoaUFycmF5GAIgAygFEhEKCWdhbmdBcnJheRgD", 
              "IAMoBRITCgthbkdhbmdBcnJheRgEIAMoBRIUCgxidVpoYW5nQXJyYXkYBSAD", 
              "KAUSEQoJcGVuZ0FycmF5GAYgAygFEg8KB291dENhcmQYByADKAUSDgoGd0Fy", 
              "cmF5GAggAygFEg8KB3dOdW1iZXIYCSABKAUSFAoMd1RvdGFsTnVtYmVyGAog", 
              "ASgFEg4KBnRBcnJheRgLIAMoBRIPCgd0TnVtYmVyGAwgASgFEhQKDHRUb3Rh", 
              "bE51bWJlchgNIAEoBRIOCgZzQXJyYXkYDiADKAUSDwoHc051bWJlchgPIAEo", 
              "BRIUCgxzVG90YWxOdW1iZXIYECABKAUSDgoGaHVUeXBlGBEgASgFEgwKBFNv", 
              "cmUYEiABKAUSEAoISGF0SW1hZ2UYEyABKAkSCwoDU2V4GBQgASgFEgwKBE5h", 
            "bWUYFSABKAlCHKoCGURvbHBoaW5TZXJ2ZXIuUHJvdG9FbnRpdHk="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_A1001Response__Descriptor = Descriptor.MessageTypes[0];
          internal__static_A1001Response__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1001Response, global::DolphinServer.ProtoEntity.A1001Response.Builder>(internal__static_A1001Response__Descriptor,
                  new string[] { "ErrorInfo", "ErrorCode", "Uid", "RoomId", "RoomType", "ZhangShu", "JuShu", "Users", "IsEnd", "IsFrist", "CurrentUid", "CurrentCard", "NeedGangDaPai", "HaidiPai", "NickName", "ImageUrl", "RoomCard", "FriendNumber", "IsLingQu", });
          internal__static_A1001User__Descriptor = Descriptor.MessageTypes[1];
          internal__static_A1001User__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1001User, global::DolphinServer.ProtoEntity.A1001User.Builder>(internal__static_A1001User__Descriptor,
                  new string[] { "Uid", "ChiArray", "GangArray", "AnGangArray", "BuZhangArray", "PengArray", "OutCard", "WArray", "WNumber", "WTotalNumber", "TArray", "TNumber", "TTotalNumber", "SArray", "SNumber", "STotalNumber", "HuType", "Sore", "HatImage", "Sex", "Name", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion

    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class A1001Response : pb::GeneratedMessage<A1001Response, A1001Response.Builder> {
    private A1001Response() { }
    private static readonly A1001Response defaultInstance = new A1001Response().MakeReadOnly();
    private static readonly string[] _a1001ResponseFieldNames = new string[] { "CurrentCard", "CurrentUid", "ErrorCode", "ErrorInfo", "FriendNumber", "HaidiPai", "ImageUrl", "IsEnd", "IsFrist", "IsLingQu", "JuShu", "NeedGangDaPai", "NickName", "RoomCard", "RoomId", "RoomType", "Uid", "Users", "ZhangShu" };
    private static readonly uint[] _a1001ResponseFieldTags = new uint[] { 96, 90, 16, 10, 144, 112, 130, 72, 80, 152, 56, 104, 122, 136, 32, 40, 26, 66, 48 };
    public static A1001Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override A1001Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override A1001Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1001Response.internal__static_A1001Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<A1001Response, A1001Response.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1001Response.internal__static_A1001Response__FieldAccessorTable; }
    }

    public const int ErrorInfoFieldNumber = 1;
    private bool hasErrorInfo;
    private string errorInfo_ = "";
    public bool HasErrorInfo {
      get { return hasErrorInfo; }
    }
    public string ErrorInfo {
      get { return errorInfo_; }
    }

    public const int ErrorCodeFieldNumber = 2;
    private bool hasErrorCode;
    private int errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public int ErrorCode {
      get { return errorCode_; }
    }

    public const int UidFieldNumber = 3;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }

    public const int RoomIdFieldNumber = 4;
    private bool hasRoomId;
    private int roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public int RoomId {
      get { return roomId_; }
    }

    public const int RoomTypeFieldNumber = 5;
    private bool hasRoomType;
    private int roomType_;
    public bool HasRoomType {
      get { return hasRoomType; }
    }
    public int RoomType {
      get { return roomType_; }
    }

    public const int ZhangShuFieldNumber = 6;
    private bool hasZhangShu;
    private int zhangShu_;
    public bool HasZhangShu {
      get { return hasZhangShu; }
    }
    public int ZhangShu {
      get { return zhangShu_; }
    }

    public const int JuShuFieldNumber = 7;
    private bool hasJuShu;
    private int juShu_;
    public bool HasJuShu {
      get { return hasJuShu; }
    }
    public int JuShu {
      get { return juShu_; }
    }

    public const int UsersFieldNumber = 8;
    private pbc::PopsicleList<global::DolphinServer.ProtoEntity.A1001User> users_ = new pbc::PopsicleList<global::DolphinServer.ProtoEntity.A1001User>();
    public scg::IList<global::DolphinServer.ProtoEntity.A1001User> UsersList {
      get { return users_; }
    }
    public int UsersCount {
      get { return users_.Count; }
    }
    public global::DolphinServer.ProtoEntity.A1001User GetUsers(int index) {
      return users_[index];
    }

    public const int IsEndFieldNumber = 9;
    private bool hasIsEnd;
    private int isEnd_;
    public bool HasIsEnd {
      get { return hasIsEnd; }
    }
    public int IsEnd {
      get { return isEnd_; }
    }

    public const int IsFristFieldNumber = 10;
    private bool hasIsFrist;
    private int isFrist_;
    public bool HasIsFrist {
      get { return hasIsFrist; }
    }
    public int IsFrist {
      get { return isFrist_; }
    }

    public const int CurrentUidFieldNumber = 11;
    private bool hasCurrentUid;
    private string currentUid_ = "";
    public bool HasCurrentUid {
      get { return hasCurrentUid; }
    }
    public string CurrentUid {
      get { return currentUid_; }
    }

    public const int CurrentCardFieldNumber = 12;
    private pbc::PopsicleList<int> currentCard_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CurrentCardList {
      get { return pbc::Lists.AsReadOnly(currentCard_); }
    }
    public int CurrentCardCount {
      get { return currentCard_.Count; }
    }
    public int GetCurrentCard(int index) {
      return currentCard_[index];
    }

    public const int NeedGangDaPaiFieldNumber = 13;
    private pbc::PopsicleList<int> needGangDaPai_ = new pbc::PopsicleList<int>();
    public scg::IList<int> NeedGangDaPaiList {
      get { return pbc::Lists.AsReadOnly(needGangDaPai_); }
    }
    public int NeedGangDaPaiCount {
      get { return needGangDaPai_.Count; }
    }
    public int GetNeedGangDaPai(int index) {
      return needGangDaPai_[index];
    }

    public const int HaidiPaiFieldNumber = 14;
    private bool hasHaidiPai;
    private int haidiPai_;
    public bool HasHaidiPai {
      get { return hasHaidiPai; }
    }
    public int HaidiPai {
      get { return haidiPai_; }
    }

    public const int NickNameFieldNumber = 15;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }

    public const int ImageUrlFieldNumber = 16;
    private bool hasImageUrl;
    private string imageUrl_ = "";
    public bool HasImageUrl {
      get { return hasImageUrl; }
    }
    public string ImageUrl {
      get { return imageUrl_; }
    }

    public const int RoomCardFieldNumber = 17;
    private bool hasRoomCard;
    private int roomCard_;
    public bool HasRoomCard {
      get { return hasRoomCard; }
    }
    public int RoomCard {
      get { return roomCard_; }
    }

    public const int FriendNumberFieldNumber = 18;
    private bool hasFriendNumber;
    private int friendNumber_;
    public bool HasFriendNumber {
      get { return hasFriendNumber; }
    }
    public int FriendNumber {
      get { return friendNumber_; }
    }

    public const int IsLingQuFieldNumber = 19;
    private bool hasIsLingQu;
    private int isLingQu_;
    public bool HasIsLingQu {
      get { return hasIsLingQu; }
    }
    public int IsLingQu {
      get { return isLingQu_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _a1001ResponseFieldNames;
      if (hasErrorInfo) {
        output.WriteString(1, field_names[3], ErrorInfo);
      }
      if (hasErrorCode) {
        output.WriteInt32(2, field_names[2], ErrorCode);
      }
      if (hasUid) {
        output.WriteString(3, field_names[16], Uid);
      }
      if (hasRoomId) {
        output.WriteInt32(4, field_names[14], RoomId);
      }
      if (hasRoomType) {
        output.WriteInt32(5, field_names[15], RoomType);
      }
      if (hasZhangShu) {
        output.WriteInt32(6, field_names[18], ZhangShu);
      }
      if (hasJuShu) {
        output.WriteInt32(7, field_names[10], JuShu);
      }
      if (users_.Count > 0) {
        output.WriteMessageArray(8, field_names[17], users_);
      }
      if (hasIsEnd) {
        output.WriteInt32(9, field_names[7], IsEnd);
      }
      if (hasIsFrist) {
        output.WriteInt32(10, field_names[8], IsFrist);
      }
      if (hasCurrentUid) {
        output.WriteString(11, field_names[1], CurrentUid);
      }
      if (currentCard_.Count > 0) {
        output.WriteInt32Array(12, field_names[0], currentCard_);
      }
      if (needGangDaPai_.Count > 0) {
        output.WriteInt32Array(13, field_names[11], needGangDaPai_);
      }
      if (hasHaidiPai) {
        output.WriteInt32(14, field_names[5], HaidiPai);
      }
      if (hasNickName) {
        output.WriteString(15, field_names[12], NickName);
      }
      if (hasImageUrl) {
        output.WriteString(16, field_names[6], ImageUrl);
      }
      if (hasRoomCard) {
        output.WriteInt32(17, field_names[13], RoomCard);
      }
      if (hasFriendNumber) {
        output.WriteInt32(18, field_names[4], FriendNumber);
      }
      if (hasIsLingQu) {
        output.WriteInt32(19, field_names[9], IsLingQu);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasErrorInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ErrorInfo);
      }
      if (hasErrorCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ErrorCode);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Uid);
      }
      if (hasRoomId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, RoomId);
      }
      if (hasRoomType) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, RoomType);
      }
      if (hasZhangShu) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ZhangShu);
      }
      if (hasJuShu) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, JuShu);
      }
      foreach (global::DolphinServer.ProtoEntity.A1001User element in UsersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      if (hasIsEnd) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, IsEnd);
      }
      if (hasIsFrist) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, IsFrist);
      }
      if (hasCurrentUid) {
        size += pb::CodedOutputStream.ComputeStringSize(11, CurrentUid);
      }
      {
        int dataSize = 0;
        foreach (int element in CurrentCardList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * currentCard_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in NeedGangDaPaiList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * needGangDaPai_.Count;
      }
      if (hasHaidiPai) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, HaidiPai);
      }
      if (hasNickName) {
        size += pb::CodedOutputStream.ComputeStringSize(15, NickName);
      }
      if (hasImageUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(16, ImageUrl);
      }
      if (hasRoomCard) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, RoomCard);
      }
      if (hasFriendNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, FriendNumber);
      }
      if (hasIsLingQu) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, IsLingQu);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static A1001Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1001Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1001Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1001Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1001Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1001Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static A1001Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static A1001Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static A1001Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1001Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private A1001Response MakeReadOnly() {
      users_.MakeReadOnly();
      currentCard_.MakeReadOnly();
      needGangDaPai_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(A1001Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<A1001Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(A1001Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private A1001Response result;

      private A1001Response PrepareBuilder() {
        if (resultIsReadOnly) {
          A1001Response original = result;
          result = new A1001Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override A1001Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.A1001Response.Descriptor; }
      }

      public override A1001Response DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.A1001Response.DefaultInstance; }
      }

      public override A1001Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is A1001Response) {
          return MergeFrom((A1001Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(A1001Response other) {
        if (other == global::DolphinServer.ProtoEntity.A1001Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorInfo) {
          ErrorInfo = other.ErrorInfo;
        }
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        if (other.HasRoomType) {
          RoomType = other.RoomType;
        }
        if (other.HasZhangShu) {
          ZhangShu = other.ZhangShu;
        }
        if (other.HasJuShu) {
          JuShu = other.JuShu;
        }
        if (other.users_.Count != 0) {
          result.users_.Add(other.users_);
        }
        if (other.HasIsEnd) {
          IsEnd = other.IsEnd;
        }
        if (other.HasIsFrist) {
          IsFrist = other.IsFrist;
        }
        if (other.HasCurrentUid) {
          CurrentUid = other.CurrentUid;
        }
        if (other.currentCard_.Count != 0) {
          result.currentCard_.Add(other.currentCard_);
        }
        if (other.needGangDaPai_.Count != 0) {
          result.needGangDaPai_.Add(other.needGangDaPai_);
        }
        if (other.HasHaidiPai) {
          HaidiPai = other.HaidiPai;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasImageUrl) {
          ImageUrl = other.ImageUrl;
        }
        if (other.HasRoomCard) {
          RoomCard = other.RoomCard;
        }
        if (other.HasFriendNumber) {
          FriendNumber = other.FriendNumber;
        }
        if (other.HasIsLingQu) {
          IsLingQu = other.IsLingQu;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_a1001ResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _a1001ResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasErrorInfo = input.ReadString(ref result.errorInfo_);
              break;
            }
            case 16: {
              result.hasErrorCode = input.ReadInt32(ref result.errorCode_);
              break;
            }
            case 26: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 32: {
              result.hasRoomId = input.ReadInt32(ref result.roomId_);
              break;
            }
            case 40: {
              result.hasRoomType = input.ReadInt32(ref result.roomType_);
              break;
            }
            case 48: {
              result.hasZhangShu = input.ReadInt32(ref result.zhangShu_);
              break;
            }
            case 56: {
              result.hasJuShu = input.ReadInt32(ref result.juShu_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.users_, global::DolphinServer.ProtoEntity.A1001User.DefaultInstance, extensionRegistry);
              break;
            }
            case 72: {
              result.hasIsEnd = input.ReadInt32(ref result.isEnd_);
              break;
            }
            case 80: {
              result.hasIsFrist = input.ReadInt32(ref result.isFrist_);
              break;
            }
            case 90: {
              result.hasCurrentUid = input.ReadString(ref result.currentUid_);
              break;
            }
            case 98:
            case 96: {
              input.ReadInt32Array(tag, field_name, result.currentCard_);
              break;
            }
            case 106:
            case 104: {
              input.ReadInt32Array(tag, field_name, result.needGangDaPai_);
              break;
            }
            case 112: {
              result.hasHaidiPai = input.ReadInt32(ref result.haidiPai_);
              break;
            }
            case 122: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 130: {
              result.hasImageUrl = input.ReadString(ref result.imageUrl_);
              break;
            }
            case 136: {
              result.hasRoomCard = input.ReadInt32(ref result.roomCard_);
              break;
            }
            case 144: {
              result.hasFriendNumber = input.ReadInt32(ref result.friendNumber_);
              break;
            }
            case 152: {
              result.hasIsLingQu = input.ReadInt32(ref result.isLingQu_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasErrorInfo {
        get { return result.hasErrorInfo; }
      }
      public string ErrorInfo {
        get { return result.ErrorInfo; }
        set { SetErrorInfo(value); }
      }
      public Builder SetErrorInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorInfo = true;
        result.errorInfo_ = value;
        return this;
      }
      public Builder ClearErrorInfo() {
        PrepareBuilder();
        result.hasErrorInfo = false;
        result.errorInfo_ = "";
        return this;
      }

      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public int ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(int value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }

      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }

      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public int RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(int value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0;
        return this;
      }

      public bool HasRoomType {
        get { return result.hasRoomType; }
      }
      public int RoomType {
        get { return result.RoomType; }
        set { SetRoomType(value); }
      }
      public Builder SetRoomType(int value) {
        PrepareBuilder();
        result.hasRoomType = true;
        result.roomType_ = value;
        return this;
      }
      public Builder ClearRoomType() {
        PrepareBuilder();
        result.hasRoomType = false;
        result.roomType_ = 0;
        return this;
      }

      public bool HasZhangShu {
        get { return result.hasZhangShu; }
      }
      public int ZhangShu {
        get { return result.ZhangShu; }
        set { SetZhangShu(value); }
      }
      public Builder SetZhangShu(int value) {
        PrepareBuilder();
        result.hasZhangShu = true;
        result.zhangShu_ = value;
        return this;
      }
      public Builder ClearZhangShu() {
        PrepareBuilder();
        result.hasZhangShu = false;
        result.zhangShu_ = 0;
        return this;
      }

      public bool HasJuShu {
        get { return result.hasJuShu; }
      }
      public int JuShu {
        get { return result.JuShu; }
        set { SetJuShu(value); }
      }
      public Builder SetJuShu(int value) {
        PrepareBuilder();
        result.hasJuShu = true;
        result.juShu_ = value;
        return this;
      }
      public Builder ClearJuShu() {
        PrepareBuilder();
        result.hasJuShu = false;
        result.juShu_ = 0;
        return this;
      }

      public pbc::IPopsicleList<global::DolphinServer.ProtoEntity.A1001User> UsersList {
        get { return PrepareBuilder().users_; }
      }
      public int UsersCount {
        get { return result.UsersCount; }
      }
      public global::DolphinServer.ProtoEntity.A1001User GetUsers(int index) {
        return result.GetUsers(index);
      }
      public Builder SetUsers(int index, global::DolphinServer.ProtoEntity.A1001User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_[index] = value;
        return this;
      }
      public Builder SetUsers(int index, global::DolphinServer.ProtoEntity.A1001User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUsers(global::DolphinServer.ProtoEntity.A1001User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_.Add(value);
        return this;
      }
      public Builder AddUsers(global::DolphinServer.ProtoEntity.A1001User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUsers(scg::IEnumerable<global::DolphinServer.ProtoEntity.A1001User> values) {
        PrepareBuilder();
        result.users_.Add(values);
        return this;
      }
      public Builder ClearUsers() {
        PrepareBuilder();
        result.users_.Clear();
        return this;
      }

      public bool HasIsEnd {
        get { return result.hasIsEnd; }
      }
      public int IsEnd {
        get { return result.IsEnd; }
        set { SetIsEnd(value); }
      }
      public Builder SetIsEnd(int value) {
        PrepareBuilder();
        result.hasIsEnd = true;
        result.isEnd_ = value;
        return this;
      }
      public Builder ClearIsEnd() {
        PrepareBuilder();
        result.hasIsEnd = false;
        result.isEnd_ = 0;
        return this;
      }

      public bool HasIsFrist {
        get { return result.hasIsFrist; }
      }
      public int IsFrist {
        get { return result.IsFrist; }
        set { SetIsFrist(value); }
      }
      public Builder SetIsFrist(int value) {
        PrepareBuilder();
        result.hasIsFrist = true;
        result.isFrist_ = value;
        return this;
      }
      public Builder ClearIsFrist() {
        PrepareBuilder();
        result.hasIsFrist = false;
        result.isFrist_ = 0;
        return this;
      }

      public bool HasCurrentUid {
        get { return result.hasCurrentUid; }
      }
      public string CurrentUid {
        get { return result.CurrentUid; }
        set { SetCurrentUid(value); }
      }
      public Builder SetCurrentUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentUid = true;
        result.currentUid_ = value;
        return this;
      }
      public Builder ClearCurrentUid() {
        PrepareBuilder();
        result.hasCurrentUid = false;
        result.currentUid_ = "";
        return this;
      }

      public pbc::IPopsicleList<int> CurrentCardList {
        get { return PrepareBuilder().currentCard_; }
      }
      public int CurrentCardCount {
        get { return result.CurrentCardCount; }
      }
      public int GetCurrentCard(int index) {
        return result.GetCurrentCard(index);
      }
      public Builder SetCurrentCard(int index, int value) {
        PrepareBuilder();
        result.currentCard_[index] = value;
        return this;
      }
      public Builder AddCurrentCard(int value) {
        PrepareBuilder();
        result.currentCard_.Add(value);
        return this;
      }
      public Builder AddRangeCurrentCard(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.currentCard_.Add(values);
        return this;
      }
      public Builder ClearCurrentCard() {
        PrepareBuilder();
        result.currentCard_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> NeedGangDaPaiList {
        get { return PrepareBuilder().needGangDaPai_; }
      }
      public int NeedGangDaPaiCount {
        get { return result.NeedGangDaPaiCount; }
      }
      public int GetNeedGangDaPai(int index) {
        return result.GetNeedGangDaPai(index);
      }
      public Builder SetNeedGangDaPai(int index, int value) {
        PrepareBuilder();
        result.needGangDaPai_[index] = value;
        return this;
      }
      public Builder AddNeedGangDaPai(int value) {
        PrepareBuilder();
        result.needGangDaPai_.Add(value);
        return this;
      }
      public Builder AddRangeNeedGangDaPai(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.needGangDaPai_.Add(values);
        return this;
      }
      public Builder ClearNeedGangDaPai() {
        PrepareBuilder();
        result.needGangDaPai_.Clear();
        return this;
      }

      public bool HasHaidiPai {
        get { return result.hasHaidiPai; }
      }
      public int HaidiPai {
        get { return result.HaidiPai; }
        set { SetHaidiPai(value); }
      }
      public Builder SetHaidiPai(int value) {
        PrepareBuilder();
        result.hasHaidiPai = true;
        result.haidiPai_ = value;
        return this;
      }
      public Builder ClearHaidiPai() {
        PrepareBuilder();
        result.hasHaidiPai = false;
        result.haidiPai_ = 0;
        return this;
      }

      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }

      public bool HasImageUrl {
        get { return result.hasImageUrl; }
      }
      public string ImageUrl {
        get { return result.ImageUrl; }
        set { SetImageUrl(value); }
      }
      public Builder SetImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageUrl = true;
        result.imageUrl_ = value;
        return this;
      }
      public Builder ClearImageUrl() {
        PrepareBuilder();
        result.hasImageUrl = false;
        result.imageUrl_ = "";
        return this;
      }

      public bool HasRoomCard {
        get { return result.hasRoomCard; }
      }
      public int RoomCard {
        get { return result.RoomCard; }
        set { SetRoomCard(value); }
      }
      public Builder SetRoomCard(int value) {
        PrepareBuilder();
        result.hasRoomCard = true;
        result.roomCard_ = value;
        return this;
      }
      public Builder ClearRoomCard() {
        PrepareBuilder();
        result.hasRoomCard = false;
        result.roomCard_ = 0;
        return this;
      }

      public bool HasFriendNumber {
        get { return result.hasFriendNumber; }
      }
      public int FriendNumber {
        get { return result.FriendNumber; }
        set { SetFriendNumber(value); }
      }
      public Builder SetFriendNumber(int value) {
        PrepareBuilder();
        result.hasFriendNumber = true;
        result.friendNumber_ = value;
        return this;
      }
      public Builder ClearFriendNumber() {
        PrepareBuilder();
        result.hasFriendNumber = false;
        result.friendNumber_ = 0;
        return this;
      }

      public bool HasIsLingQu {
        get { return result.hasIsLingQu; }
      }
      public int IsLingQu {
        get { return result.IsLingQu; }
        set { SetIsLingQu(value); }
      }
      public Builder SetIsLingQu(int value) {
        PrepareBuilder();
        result.hasIsLingQu = true;
        result.isLingQu_ = value;
        return this;
      }
      public Builder ClearIsLingQu() {
        PrepareBuilder();
        result.hasIsLingQu = false;
        result.isLingQu_ = 0;
        return this;
      }
    }
    static A1001Response() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1001Response.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class A1001User : pb::GeneratedMessage<A1001User, A1001User.Builder> {
    private A1001User() { }
    private static readonly A1001User defaultInstance = new A1001User().MakeReadOnly();
    private static readonly string[] _a1001UserFieldNames = new string[] { "HatImage", "Name", "Sex", "Sore", "Uid", "anGangArray", "buZhangArray", "chiArray", "gangArray", "huType", "outCard", "pengArray", "sArray", "sNumber", "sTotalNumber", "tArray", "tNumber", "tTotalNumber", "wArray", "wNumber", "wTotalNumber" };
    private static readonly uint[] _a1001UserFieldTags = new uint[] { 154, 170, 160, 144, 10, 32, 40, 16, 24, 136, 56, 48, 112, 120, 128, 88, 96, 104, 64, 72, 80 };
    public static A1001User DefaultInstance {
      get { return defaultInstance; }
    }

    public override A1001User DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override A1001User ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1001Response.internal__static_A1001User__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<A1001User, A1001User.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1001Response.internal__static_A1001User__FieldAccessorTable; }
    }

    public const int UidFieldNumber = 1;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }

    public const int ChiArrayFieldNumber = 2;
    private pbc::PopsicleList<int> chiArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ChiArrayList {
      get { return pbc::Lists.AsReadOnly(chiArray_); }
    }
    public int ChiArrayCount {
      get { return chiArray_.Count; }
    }
    public int GetChiArray(int index) {
      return chiArray_[index];
    }

    public const int GangArrayFieldNumber = 3;
    private pbc::PopsicleList<int> gangArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GangArrayList {
      get { return pbc::Lists.AsReadOnly(gangArray_); }
    }
    public int GangArrayCount {
      get { return gangArray_.Count; }
    }
    public int GetGangArray(int index) {
      return gangArray_[index];
    }

    public const int AnGangArrayFieldNumber = 4;
    private pbc::PopsicleList<int> anGangArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> AnGangArrayList {
      get { return pbc::Lists.AsReadOnly(anGangArray_); }
    }
    public int AnGangArrayCount {
      get { return anGangArray_.Count; }
    }
    public int GetAnGangArray(int index) {
      return anGangArray_[index];
    }

    public const int BuZhangArrayFieldNumber = 5;
    private pbc::PopsicleList<int> buZhangArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> BuZhangArrayList {
      get { return pbc::Lists.AsReadOnly(buZhangArray_); }
    }
    public int BuZhangArrayCount {
      get { return buZhangArray_.Count; }
    }
    public int GetBuZhangArray(int index) {
      return buZhangArray_[index];
    }

    public const int PengArrayFieldNumber = 6;
    private pbc::PopsicleList<int> pengArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PengArrayList {
      get { return pbc::Lists.AsReadOnly(pengArray_); }
    }
    public int PengArrayCount {
      get { return pengArray_.Count; }
    }
    public int GetPengArray(int index) {
      return pengArray_[index];
    }

    public const int OutCardFieldNumber = 7;
    private pbc::PopsicleList<int> outCard_ = new pbc::PopsicleList<int>();
    public scg::IList<int> OutCardList {
      get { return pbc::Lists.AsReadOnly(outCard_); }
    }
    public int OutCardCount {
      get { return outCard_.Count; }
    }
    public int GetOutCard(int index) {
      return outCard_[index];
    }

    public const int WArrayFieldNumber = 8;
    private pbc::PopsicleList<int> wArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> WArrayList {
      get { return pbc::Lists.AsReadOnly(wArray_); }
    }
    public int WArrayCount {
      get { return wArray_.Count; }
    }
    public int GetWArray(int index) {
      return wArray_[index];
    }

    public const int WNumberFieldNumber = 9;
    private bool hasWNumber;
    private int wNumber_;
    public bool HasWNumber {
      get { return hasWNumber; }
    }
    public int WNumber {
      get { return wNumber_; }
    }

    public const int WTotalNumberFieldNumber = 10;
    private bool hasWTotalNumber;
    private int wTotalNumber_;
    public bool HasWTotalNumber {
      get { return hasWTotalNumber; }
    }
    public int WTotalNumber {
      get { return wTotalNumber_; }
    }

    public const int TArrayFieldNumber = 11;
    private pbc::PopsicleList<int> tArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> TArrayList {
      get { return pbc::Lists.AsReadOnly(tArray_); }
    }
    public int TArrayCount {
      get { return tArray_.Count; }
    }
    public int GetTArray(int index) {
      return tArray_[index];
    }

    public const int TNumberFieldNumber = 12;
    private bool hasTNumber;
    private int tNumber_;
    public bool HasTNumber {
      get { return hasTNumber; }
    }
    public int TNumber {
      get { return tNumber_; }
    }

    public const int TTotalNumberFieldNumber = 13;
    private bool hasTTotalNumber;
    private int tTotalNumber_;
    public bool HasTTotalNumber {
      get { return hasTTotalNumber; }
    }
    public int TTotalNumber {
      get { return tTotalNumber_; }
    }

    public const int SArrayFieldNumber = 14;
    private pbc::PopsicleList<int> sArray_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SArrayList {
      get { return pbc::Lists.AsReadOnly(sArray_); }
    }
    public int SArrayCount {
      get { return sArray_.Count; }
    }
    public int GetSArray(int index) {
      return sArray_[index];
    }

    public const int SNumberFieldNumber = 15;
    private bool hasSNumber;
    private int sNumber_;
    public bool HasSNumber {
      get { return hasSNumber; }
    }
    public int SNumber {
      get { return sNumber_; }
    }

    public const int STotalNumberFieldNumber = 16;
    private bool hasSTotalNumber;
    private int sTotalNumber_;
    public bool HasSTotalNumber {
      get { return hasSTotalNumber; }
    }
    public int STotalNumber {
      get { return sTotalNumber_; }
    }

    public const int HuTypeFieldNumber = 17;
    private bool hasHuType;
    private int huType_;
    public bool HasHuType {
      get { return hasHuType; }
    }
    public int HuType {
      get { return huType_; }
    }

    public const int SoreFieldNumber = 18;
    private bool hasSore;
    private int sore_;
    public bool HasSore {
      get { return hasSore; }
    }
    public int Sore {
      get { return sore_; }
    }

    public const int HatImageFieldNumber = 19;
    private bool hasHatImage;
    private string hatImage_ = "";
    public bool HasHatImage {
      get { return hasHatImage; }
    }
    public string HatImage {
      get { return hatImage_; }
    }

    public const int SexFieldNumber = 20;
    private bool hasSex;
    private int sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    public int Sex {
      get { return sex_; }
    }

    public const int NameFieldNumber = 21;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _a1001UserFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[4], Uid);
      }
      if (chiArray_.Count > 0) {
        output.WriteInt32Array(2, field_names[7], chiArray_);
      }
      if (gangArray_.Count > 0) {
        output.WriteInt32Array(3, field_names[8], gangArray_);
      }
      if (anGangArray_.Count > 0) {
        output.WriteInt32Array(4, field_names[5], anGangArray_);
      }
      if (buZhangArray_.Count > 0) {
        output.WriteInt32Array(5, field_names[6], buZhangArray_);
      }
      if (pengArray_.Count > 0) {
        output.WriteInt32Array(6, field_names[11], pengArray_);
      }
      if (outCard_.Count > 0) {
        output.WriteInt32Array(7, field_names[10], outCard_);
      }
      if (wArray_.Count > 0) {
        output.WriteInt32Array(8, field_names[18], wArray_);
      }
      if (hasWNumber) {
        output.WriteInt32(9, field_names[19], WNumber);
      }
      if (hasWTotalNumber) {
        output.WriteInt32(10, field_names[20], WTotalNumber);
      }
      if (tArray_.Count > 0) {
        output.WriteInt32Array(11, field_names[15], tArray_);
      }
      if (hasTNumber) {
        output.WriteInt32(12, field_names[16], TNumber);
      }
      if (hasTTotalNumber) {
        output.WriteInt32(13, field_names[17], TTotalNumber);
      }
      if (sArray_.Count > 0) {
        output.WriteInt32Array(14, field_names[12], sArray_);
      }
      if (hasSNumber) {
        output.WriteInt32(15, field_names[13], SNumber);
      }
      if (hasSTotalNumber) {
        output.WriteInt32(16, field_names[14], STotalNumber);
      }
      if (hasHuType) {
        output.WriteInt32(17, field_names[9], HuType);
      }
      if (hasSore) {
        output.WriteInt32(18, field_names[3], Sore);
      }
      if (hasHatImage) {
        output.WriteString(19, field_names[0], HatImage);
      }
      if (hasSex) {
        output.WriteInt32(20, field_names[2], Sex);
      }
      if (hasName) {
        output.WriteString(21, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
      }
      {
        int dataSize = 0;
        foreach (int element in ChiArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * chiArray_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in GangArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * gangArray_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in AnGangArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * anGangArray_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in BuZhangArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * buZhangArray_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in PengArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * pengArray_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in OutCardList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * outCard_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in WArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * wArray_.Count;
      }
      if (hasWNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, WNumber);
      }
      if (hasWTotalNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, WTotalNumber);
      }
      {
        int dataSize = 0;
        foreach (int element in TArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * tArray_.Count;
      }
      if (hasTNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, TNumber);
      }
      if (hasTTotalNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, TTotalNumber);
      }
      {
        int dataSize = 0;
        foreach (int element in SArrayList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * sArray_.Count;
      }
      if (hasSNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, SNumber);
      }
      if (hasSTotalNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, STotalNumber);
      }
      if (hasHuType) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, HuType);
      }
      if (hasSore) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, Sore);
      }
      if (hasHatImage) {
        size += pb::CodedOutputStream.ComputeStringSize(19, HatImage);
      }
      if (hasSex) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, Sex);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(21, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static A1001User ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1001User ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1001User ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1001User ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1001User ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1001User ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static A1001User ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static A1001User ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static A1001User ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1001User ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private A1001User MakeReadOnly() {
      chiArray_.MakeReadOnly();
      gangArray_.MakeReadOnly();
      anGangArray_.MakeReadOnly();
      buZhangArray_.MakeReadOnly();
      pengArray_.MakeReadOnly();
      outCard_.MakeReadOnly();
      wArray_.MakeReadOnly();
      tArray_.MakeReadOnly();
      sArray_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(A1001User prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<A1001User, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(A1001User cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private A1001User result;

      private A1001User PrepareBuilder() {
        if (resultIsReadOnly) {
          A1001User original = result;
          result = new A1001User();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override A1001User MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.A1001User.Descriptor; }
      }

      public override A1001User DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.A1001User.DefaultInstance; }
      }

      public override A1001User BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is A1001User) {
          return MergeFrom((A1001User) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(A1001User other) {
        if (other == global::DolphinServer.ProtoEntity.A1001User.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.chiArray_.Count != 0) {
          result.chiArray_.Add(other.chiArray_);
        }
        if (other.gangArray_.Count != 0) {
          result.gangArray_.Add(other.gangArray_);
        }
        if (other.anGangArray_.Count != 0) {
          result.anGangArray_.Add(other.anGangArray_);
        }
        if (other.buZhangArray_.Count != 0) {
          result.buZhangArray_.Add(other.buZhangArray_);
        }
        if (other.pengArray_.Count != 0) {
          result.pengArray_.Add(other.pengArray_);
        }
        if (other.outCard_.Count != 0) {
          result.outCard_.Add(other.outCard_);
        }
        if (other.wArray_.Count != 0) {
          result.wArray_.Add(other.wArray_);
        }
        if (other.HasWNumber) {
          WNumber = other.WNumber;
        }
        if (other.HasWTotalNumber) {
          WTotalNumber = other.WTotalNumber;
        }
        if (other.tArray_.Count != 0) {
          result.tArray_.Add(other.tArray_);
        }
        if (other.HasTNumber) {
          TNumber = other.TNumber;
        }
        if (other.HasTTotalNumber) {
          TTotalNumber = other.TTotalNumber;
        }
        if (other.sArray_.Count != 0) {
          result.sArray_.Add(other.sArray_);
        }
        if (other.HasSNumber) {
          SNumber = other.SNumber;
        }
        if (other.HasSTotalNumber) {
          STotalNumber = other.STotalNumber;
        }
        if (other.HasHuType) {
          HuType = other.HuType;
        }
        if (other.HasSore) {
          Sore = other.Sore;
        }
        if (other.HasHatImage) {
          HatImage = other.HatImage;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_a1001UserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _a1001UserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.chiArray_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.gangArray_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.anGangArray_);
              break;
            }
            case 42:
            case 40: {
              input.ReadInt32Array(tag, field_name, result.buZhangArray_);
              break;
            }
            case 50:
            case 48: {
              input.ReadInt32Array(tag, field_name, result.pengArray_);
              break;
            }
            case 58:
            case 56: {
              input.ReadInt32Array(tag, field_name, result.outCard_);
              break;
            }
            case 66:
            case 64: {
              input.ReadInt32Array(tag, field_name, result.wArray_);
              break;
            }
            case 72: {
              result.hasWNumber = input.ReadInt32(ref result.wNumber_);
              break;
            }
            case 80: {
              result.hasWTotalNumber = input.ReadInt32(ref result.wTotalNumber_);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.tArray_);
              break;
            }
            case 96: {
              result.hasTNumber = input.ReadInt32(ref result.tNumber_);
              break;
            }
            case 104: {
              result.hasTTotalNumber = input.ReadInt32(ref result.tTotalNumber_);
              break;
            }
            case 114:
            case 112: {
              input.ReadInt32Array(tag, field_name, result.sArray_);
              break;
            }
            case 120: {
              result.hasSNumber = input.ReadInt32(ref result.sNumber_);
              break;
            }
            case 128: {
              result.hasSTotalNumber = input.ReadInt32(ref result.sTotalNumber_);
              break;
            }
            case 136: {
              result.hasHuType = input.ReadInt32(ref result.huType_);
              break;
            }
            case 144: {
              result.hasSore = input.ReadInt32(ref result.sore_);
              break;
            }
            case 154: {
              result.hasHatImage = input.ReadString(ref result.hatImage_);
              break;
            }
            case 160: {
              result.hasSex = input.ReadInt32(ref result.sex_);
              break;
            }
            case 170: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }

      public pbc::IPopsicleList<int> ChiArrayList {
        get { return PrepareBuilder().chiArray_; }
      }
      public int ChiArrayCount {
        get { return result.ChiArrayCount; }
      }
      public int GetChiArray(int index) {
        return result.GetChiArray(index);
      }
      public Builder SetChiArray(int index, int value) {
        PrepareBuilder();
        result.chiArray_[index] = value;
        return this;
      }
      public Builder AddChiArray(int value) {
        PrepareBuilder();
        result.chiArray_.Add(value);
        return this;
      }
      public Builder AddRangeChiArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.chiArray_.Add(values);
        return this;
      }
      public Builder ClearChiArray() {
        PrepareBuilder();
        result.chiArray_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> GangArrayList {
        get { return PrepareBuilder().gangArray_; }
      }
      public int GangArrayCount {
        get { return result.GangArrayCount; }
      }
      public int GetGangArray(int index) {
        return result.GetGangArray(index);
      }
      public Builder SetGangArray(int index, int value) {
        PrepareBuilder();
        result.gangArray_[index] = value;
        return this;
      }
      public Builder AddGangArray(int value) {
        PrepareBuilder();
        result.gangArray_.Add(value);
        return this;
      }
      public Builder AddRangeGangArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gangArray_.Add(values);
        return this;
      }
      public Builder ClearGangArray() {
        PrepareBuilder();
        result.gangArray_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> AnGangArrayList {
        get { return PrepareBuilder().anGangArray_; }
      }
      public int AnGangArrayCount {
        get { return result.AnGangArrayCount; }
      }
      public int GetAnGangArray(int index) {
        return result.GetAnGangArray(index);
      }
      public Builder SetAnGangArray(int index, int value) {
        PrepareBuilder();
        result.anGangArray_[index] = value;
        return this;
      }
      public Builder AddAnGangArray(int value) {
        PrepareBuilder();
        result.anGangArray_.Add(value);
        return this;
      }
      public Builder AddRangeAnGangArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.anGangArray_.Add(values);
        return this;
      }
      public Builder ClearAnGangArray() {
        PrepareBuilder();
        result.anGangArray_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> BuZhangArrayList {
        get { return PrepareBuilder().buZhangArray_; }
      }
      public int BuZhangArrayCount {
        get { return result.BuZhangArrayCount; }
      }
      public int GetBuZhangArray(int index) {
        return result.GetBuZhangArray(index);
      }
      public Builder SetBuZhangArray(int index, int value) {
        PrepareBuilder();
        result.buZhangArray_[index] = value;
        return this;
      }
      public Builder AddBuZhangArray(int value) {
        PrepareBuilder();
        result.buZhangArray_.Add(value);
        return this;
      }
      public Builder AddRangeBuZhangArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.buZhangArray_.Add(values);
        return this;
      }
      public Builder ClearBuZhangArray() {
        PrepareBuilder();
        result.buZhangArray_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> PengArrayList {
        get { return PrepareBuilder().pengArray_; }
      }
      public int PengArrayCount {
        get { return result.PengArrayCount; }
      }
      public int GetPengArray(int index) {
        return result.GetPengArray(index);
      }
      public Builder SetPengArray(int index, int value) {
        PrepareBuilder();
        result.pengArray_[index] = value;
        return this;
      }
      public Builder AddPengArray(int value) {
        PrepareBuilder();
        result.pengArray_.Add(value);
        return this;
      }
      public Builder AddRangePengArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.pengArray_.Add(values);
        return this;
      }
      public Builder ClearPengArray() {
        PrepareBuilder();
        result.pengArray_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> OutCardList {
        get { return PrepareBuilder().outCard_; }
      }
      public int OutCardCount {
        get { return result.OutCardCount; }
      }
      public int GetOutCard(int index) {
        return result.GetOutCard(index);
      }
      public Builder SetOutCard(int index, int value) {
        PrepareBuilder();
        result.outCard_[index] = value;
        return this;
      }
      public Builder AddOutCard(int value) {
        PrepareBuilder();
        result.outCard_.Add(value);
        return this;
      }
      public Builder AddRangeOutCard(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.outCard_.Add(values);
        return this;
      }
      public Builder ClearOutCard() {
        PrepareBuilder();
        result.outCard_.Clear();
        return this;
      }

      public pbc::IPopsicleList<int> WArrayList {
        get { return PrepareBuilder().wArray_; }
      }
      public int WArrayCount {
        get { return result.WArrayCount; }
      }
      public int GetWArray(int index) {
        return result.GetWArray(index);
      }
      public Builder SetWArray(int index, int value) {
        PrepareBuilder();
        result.wArray_[index] = value;
        return this;
      }
      public Builder AddWArray(int value) {
        PrepareBuilder();
        result.wArray_.Add(value);
        return this;
      }
      public Builder AddRangeWArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.wArray_.Add(values);
        return this;
      }
      public Builder ClearWArray() {
        PrepareBuilder();
        result.wArray_.Clear();
        return this;
      }

      public bool HasWNumber {
        get { return result.hasWNumber; }
      }
      public int WNumber {
        get { return result.WNumber; }
        set { SetWNumber(value); }
      }
      public Builder SetWNumber(int value) {
        PrepareBuilder();
        result.hasWNumber = true;
        result.wNumber_ = value;
        return this;
      }
      public Builder ClearWNumber() {
        PrepareBuilder();
        result.hasWNumber = false;
        result.wNumber_ = 0;
        return this;
      }

      public bool HasWTotalNumber {
        get { return result.hasWTotalNumber; }
      }
      public int WTotalNumber {
        get { return result.WTotalNumber; }
        set { SetWTotalNumber(value); }
      }
      public Builder SetWTotalNumber(int value) {
        PrepareBuilder();
        result.hasWTotalNumber = true;
        result.wTotalNumber_ = value;
        return this;
      }
      public Builder ClearWTotalNumber() {
        PrepareBuilder();
        result.hasWTotalNumber = false;
        result.wTotalNumber_ = 0;
        return this;
      }

      public pbc::IPopsicleList<int> TArrayList {
        get { return PrepareBuilder().tArray_; }
      }
      public int TArrayCount {
        get { return result.TArrayCount; }
      }
      public int GetTArray(int index) {
        return result.GetTArray(index);
      }
      public Builder SetTArray(int index, int value) {
        PrepareBuilder();
        result.tArray_[index] = value;
        return this;
      }
      public Builder AddTArray(int value) {
        PrepareBuilder();
        result.tArray_.Add(value);
        return this;
      }
      public Builder AddRangeTArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.tArray_.Add(values);
        return this;
      }
      public Builder ClearTArray() {
        PrepareBuilder();
        result.tArray_.Clear();
        return this;
      }

      public bool HasTNumber {
        get { return result.hasTNumber; }
      }
      public int TNumber {
        get { return result.TNumber; }
        set { SetTNumber(value); }
      }
      public Builder SetTNumber(int value) {
        PrepareBuilder();
        result.hasTNumber = true;
        result.tNumber_ = value;
        return this;
      }
      public Builder ClearTNumber() {
        PrepareBuilder();
        result.hasTNumber = false;
        result.tNumber_ = 0;
        return this;
      }

      public bool HasTTotalNumber {
        get { return result.hasTTotalNumber; }
      }
      public int TTotalNumber {
        get { return result.TTotalNumber; }
        set { SetTTotalNumber(value); }
      }
      public Builder SetTTotalNumber(int value) {
        PrepareBuilder();
        result.hasTTotalNumber = true;
        result.tTotalNumber_ = value;
        return this;
      }
      public Builder ClearTTotalNumber() {
        PrepareBuilder();
        result.hasTTotalNumber = false;
        result.tTotalNumber_ = 0;
        return this;
      }

      public pbc::IPopsicleList<int> SArrayList {
        get { return PrepareBuilder().sArray_; }
      }
      public int SArrayCount {
        get { return result.SArrayCount; }
      }
      public int GetSArray(int index) {
        return result.GetSArray(index);
      }
      public Builder SetSArray(int index, int value) {
        PrepareBuilder();
        result.sArray_[index] = value;
        return this;
      }
      public Builder AddSArray(int value) {
        PrepareBuilder();
        result.sArray_.Add(value);
        return this;
      }
      public Builder AddRangeSArray(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.sArray_.Add(values);
        return this;
      }
      public Builder ClearSArray() {
        PrepareBuilder();
        result.sArray_.Clear();
        return this;
      }

      public bool HasSNumber {
        get { return result.hasSNumber; }
      }
      public int SNumber {
        get { return result.SNumber; }
        set { SetSNumber(value); }
      }
      public Builder SetSNumber(int value) {
        PrepareBuilder();
        result.hasSNumber = true;
        result.sNumber_ = value;
        return this;
      }
      public Builder ClearSNumber() {
        PrepareBuilder();
        result.hasSNumber = false;
        result.sNumber_ = 0;
        return this;
      }

      public bool HasSTotalNumber {
        get { return result.hasSTotalNumber; }
      }
      public int STotalNumber {
        get { return result.STotalNumber; }
        set { SetSTotalNumber(value); }
      }
      public Builder SetSTotalNumber(int value) {
        PrepareBuilder();
        result.hasSTotalNumber = true;
        result.sTotalNumber_ = value;
        return this;
      }
      public Builder ClearSTotalNumber() {
        PrepareBuilder();
        result.hasSTotalNumber = false;
        result.sTotalNumber_ = 0;
        return this;
      }

      public bool HasHuType {
        get { return result.hasHuType; }
      }
      public int HuType {
        get { return result.HuType; }
        set { SetHuType(value); }
      }
      public Builder SetHuType(int value) {
        PrepareBuilder();
        result.hasHuType = true;
        result.huType_ = value;
        return this;
      }
      public Builder ClearHuType() {
        PrepareBuilder();
        result.hasHuType = false;
        result.huType_ = 0;
        return this;
      }

      public bool HasSore {
        get { return result.hasSore; }
      }
      public int Sore {
        get { return result.Sore; }
        set { SetSore(value); }
      }
      public Builder SetSore(int value) {
        PrepareBuilder();
        result.hasSore = true;
        result.sore_ = value;
        return this;
      }
      public Builder ClearSore() {
        PrepareBuilder();
        result.hasSore = false;
        result.sore_ = 0;
        return this;
      }

      public bool HasHatImage {
        get { return result.hasHatImage; }
      }
      public string HatImage {
        get { return result.HatImage; }
        set { SetHatImage(value); }
      }
      public Builder SetHatImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHatImage = true;
        result.hatImage_ = value;
        return this;
      }
      public Builder ClearHatImage() {
        PrepareBuilder();
        result.hasHatImage = false;
        result.hatImage_ = "";
        return this;
      }

      public bool HasSex {
        get { return result.hasSex; }
      }
      public int Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(int value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }

      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static A1001User() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1001Response.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
