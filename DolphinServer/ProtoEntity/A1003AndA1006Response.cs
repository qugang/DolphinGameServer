// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: A1003AndA1006Response.txt
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace DolphinServer.ProtoEntity {

  namespace Proto {

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class A1003AndA1006Response {

      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_A1003AndA1006Response__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1003AndA1006Response, global::DolphinServer.ProtoEntity.A1003AndA1006Response.Builder> internal__static_A1003AndA1006Response__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_A1006Response__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1006Response, global::DolphinServer.ProtoEntity.A1006Response.Builder> internal__static_A1006Response__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_A1003Response__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1003Response, global::DolphinServer.ProtoEntity.A1003Response.Builder> internal__static_A1003Response__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_A1003User__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1003User, global::DolphinServer.ProtoEntity.A1003User.Builder> internal__static_A1003User__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Player__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.Player, global::DolphinServer.ProtoEntity.Player.Builder> internal__static_Player__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;

      static A1003AndA1006Response() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChlBMTAwM0FuZEExMDA2UmVzcG9uc2UudHh0IqMBChVBMTAwM0FuZEExMDA2", 
              "UmVzcG9uc2USEQoJRXJyb3JJbmZvGAEgASgJEhEKCUVycm9yQ29kZRgCIAEo", 
              "BRIgCghBMTAwM1JlcRgDIAEoCzIOLkExMDAzUmVzcG9uc2USIAoIQTEwMDZS", 
              "ZXEYBCABKAsyDi5BMTAwNlJlc3BvbnNlEg4KBlJvb21JRBgFIAEoBRIQCghS", 
              "b29tVHlwZRgGIAEoBSJbCg1BMTAwNlJlc3BvbnNlEhYKBVVzZXJzGAEgAygL", 
              "MgcuUGxheWVyEhEKCVpodWFuZ1VpZBgCIAEoCRINCgVKdVNodRgDIAEoBRIQ", 
              "CghaaGFuZ3NodRgEIAEoBSJMCg1BMTAwM1Jlc3BvbnNlEhkKBVVzZXJzGAMg", 
              "AygLMgouQTEwMDNVc2VyEg4KBlJvb21JRBgEIAEoBRIQCghSb29tVHlwZRgF", 
              "IAEoBSJ0CglBMTAwM1VzZXISCwoDVWlkGAEgASgJEhAKCEhhdEltYWdlGAIg", 
              "ASgJEgwKBFNvcmUYAyABKAUSDgoGWmh1YW5nGAQgASgFEgsKA1NleBgFIAEo", 
              "BRIPCgdJc1JlYWR5GAYgASgFEgwKBE5hbWUYByABKAkiMgoGUGxheWVyEgwK", 
              "BENhcmQYASADKAUSDQoFU2NvcmUYAiABKAUSCwoDVWlkGAMgASgJQhyqAhlE", 
            "b2xwaGluU2VydmVyLlByb3RvRW50aXR5"));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_A1003AndA1006Response__Descriptor = Descriptor.MessageTypes[0];
          internal__static_A1003AndA1006Response__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1003AndA1006Response, global::DolphinServer.ProtoEntity.A1003AndA1006Response.Builder>(internal__static_A1003AndA1006Response__Descriptor,
                  new string[] { "ErrorInfo", "ErrorCode", "A1003Req", "A1006Req", "RoomID", "RoomType", });
          internal__static_A1006Response__Descriptor = Descriptor.MessageTypes[1];
          internal__static_A1006Response__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1006Response, global::DolphinServer.ProtoEntity.A1006Response.Builder>(internal__static_A1006Response__Descriptor,
                  new string[] { "Users", "ZhuangUid", "JuShu", "Zhangshu", });
          internal__static_A1003Response__Descriptor = Descriptor.MessageTypes[2];
          internal__static_A1003Response__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1003Response, global::DolphinServer.ProtoEntity.A1003Response.Builder>(internal__static_A1003Response__Descriptor,
                  new string[] { "Users", "RoomID", "RoomType", });
          internal__static_A1003User__Descriptor = Descriptor.MessageTypes[3];
          internal__static_A1003User__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1003User, global::DolphinServer.ProtoEntity.A1003User.Builder>(internal__static_A1003User__Descriptor,
                  new string[] { "Uid", "HatImage", "Sore", "Zhuang", "Sex", "IsReady", "Name", });
          internal__static_Player__Descriptor = Descriptor.MessageTypes[4];
          internal__static_Player__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.Player, global::DolphinServer.ProtoEntity.Player.Builder>(internal__static_Player__Descriptor,
                  new string[] { "Card", "Score", "Uid", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion

    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class A1003AndA1006Response : pb::GeneratedMessage<A1003AndA1006Response, A1003AndA1006Response.Builder> {
    private A1003AndA1006Response() { }
    private static readonly A1003AndA1006Response defaultInstance = new A1003AndA1006Response().MakeReadOnly();
    private static readonly string[] _a1003AndA1006ResponseFieldNames = new string[] { "A1003Req", "A1006Req", "ErrorCode", "ErrorInfo", "RoomID", "RoomType" };
    private static readonly uint[] _a1003AndA1006ResponseFieldTags = new uint[] { 26, 34, 16, 10, 40, 48 };
    public static A1003AndA1006Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override A1003AndA1006Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override A1003AndA1006Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1003AndA1006Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<A1003AndA1006Response, A1003AndA1006Response.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1003AndA1006Response__FieldAccessorTable; }
    }

    public const int ErrorInfoFieldNumber = 1;
    private bool hasErrorInfo;
    private string errorInfo_ = "";
    public bool HasErrorInfo {
      get { return hasErrorInfo; }
    }
    public string ErrorInfo {
      get { return errorInfo_; }
    }

    public const int ErrorCodeFieldNumber = 2;
    private bool hasErrorCode;
    private int errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public int ErrorCode {
      get { return errorCode_; }
    }

    public const int A1003ReqFieldNumber = 3;
    private bool hasA1003Req;
    private global::DolphinServer.ProtoEntity.A1003Response a1003Req_;
    public bool HasA1003Req {
      get { return hasA1003Req; }
    }
    public global::DolphinServer.ProtoEntity.A1003Response A1003Req {
      get { return a1003Req_ ?? global::DolphinServer.ProtoEntity.A1003Response.DefaultInstance; }
    }

    public const int A1006ReqFieldNumber = 4;
    private bool hasA1006Req;
    private global::DolphinServer.ProtoEntity.A1006Response a1006Req_;
    public bool HasA1006Req {
      get { return hasA1006Req; }
    }
    public global::DolphinServer.ProtoEntity.A1006Response A1006Req {
      get { return a1006Req_ ?? global::DolphinServer.ProtoEntity.A1006Response.DefaultInstance; }
    }

    public const int RoomIDFieldNumber = 5;
    private bool hasRoomID;
    private int roomID_;
    public bool HasRoomID {
      get { return hasRoomID; }
    }
    public int RoomID {
      get { return roomID_; }
    }

    public const int RoomTypeFieldNumber = 6;
    private bool hasRoomType;
    private int roomType_;
    public bool HasRoomType {
      get { return hasRoomType; }
    }
    public int RoomType {
      get { return roomType_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _a1003AndA1006ResponseFieldNames;
      if (hasErrorInfo) {
        output.WriteString(1, field_names[3], ErrorInfo);
      }
      if (hasErrorCode) {
        output.WriteInt32(2, field_names[2], ErrorCode);
      }
      if (hasA1003Req) {
        output.WriteMessage(3, field_names[0], A1003Req);
      }
      if (hasA1006Req) {
        output.WriteMessage(4, field_names[1], A1006Req);
      }
      if (hasRoomID) {
        output.WriteInt32(5, field_names[4], RoomID);
      }
      if (hasRoomType) {
        output.WriteInt32(6, field_names[5], RoomType);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasErrorInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ErrorInfo);
      }
      if (hasErrorCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ErrorCode);
      }
      if (hasA1003Req) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, A1003Req);
      }
      if (hasA1006Req) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, A1006Req);
      }
      if (hasRoomID) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, RoomID);
      }
      if (hasRoomType) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, RoomType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static A1003AndA1006Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1003AndA1006Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1003AndA1006Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1003AndA1006Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1003AndA1006Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1003AndA1006Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static A1003AndA1006Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static A1003AndA1006Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static A1003AndA1006Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1003AndA1006Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private A1003AndA1006Response MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(A1003AndA1006Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<A1003AndA1006Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(A1003AndA1006Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private A1003AndA1006Response result;

      private A1003AndA1006Response PrepareBuilder() {
        if (resultIsReadOnly) {
          A1003AndA1006Response original = result;
          result = new A1003AndA1006Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override A1003AndA1006Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.A1003AndA1006Response.Descriptor; }
      }

      public override A1003AndA1006Response DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.A1003AndA1006Response.DefaultInstance; }
      }

      public override A1003AndA1006Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is A1003AndA1006Response) {
          return MergeFrom((A1003AndA1006Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(A1003AndA1006Response other) {
        if (other == global::DolphinServer.ProtoEntity.A1003AndA1006Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorInfo) {
          ErrorInfo = other.ErrorInfo;
        }
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasA1003Req) {
          MergeA1003Req(other.A1003Req);
        }
        if (other.HasA1006Req) {
          MergeA1006Req(other.A1006Req);
        }
        if (other.HasRoomID) {
          RoomID = other.RoomID;
        }
        if (other.HasRoomType) {
          RoomType = other.RoomType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_a1003AndA1006ResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _a1003AndA1006ResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasErrorInfo = input.ReadString(ref result.errorInfo_);
              break;
            }
            case 16: {
              result.hasErrorCode = input.ReadInt32(ref result.errorCode_);
              break;
            }
            case 26: {
              global::DolphinServer.ProtoEntity.A1003Response.Builder subBuilder = global::DolphinServer.ProtoEntity.A1003Response.CreateBuilder();
              if (result.hasA1003Req) {
                subBuilder.MergeFrom(A1003Req);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              A1003Req = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::DolphinServer.ProtoEntity.A1006Response.Builder subBuilder = global::DolphinServer.ProtoEntity.A1006Response.CreateBuilder();
              if (result.hasA1006Req) {
                subBuilder.MergeFrom(A1006Req);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              A1006Req = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasRoomID = input.ReadInt32(ref result.roomID_);
              break;
            }
            case 48: {
              result.hasRoomType = input.ReadInt32(ref result.roomType_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasErrorInfo {
        get { return result.hasErrorInfo; }
      }
      public string ErrorInfo {
        get { return result.ErrorInfo; }
        set { SetErrorInfo(value); }
      }
      public Builder SetErrorInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorInfo = true;
        result.errorInfo_ = value;
        return this;
      }
      public Builder ClearErrorInfo() {
        PrepareBuilder();
        result.hasErrorInfo = false;
        result.errorInfo_ = "";
        return this;
      }

      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public int ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(int value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }

      public bool HasA1003Req {
       get { return result.hasA1003Req; }
      }
      public global::DolphinServer.ProtoEntity.A1003Response A1003Req {
        get { return result.A1003Req; }
        set { SetA1003Req(value); }
      }
      public Builder SetA1003Req(global::DolphinServer.ProtoEntity.A1003Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasA1003Req = true;
        result.a1003Req_ = value;
        return this;
      }
      public Builder SetA1003Req(global::DolphinServer.ProtoEntity.A1003Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasA1003Req = true;
        result.a1003Req_ = builderForValue.Build();
        return this;
      }
      public Builder MergeA1003Req(global::DolphinServer.ProtoEntity.A1003Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasA1003Req &&
            result.a1003Req_ != global::DolphinServer.ProtoEntity.A1003Response.DefaultInstance) {
            result.a1003Req_ = global::DolphinServer.ProtoEntity.A1003Response.CreateBuilder(result.a1003Req_).MergeFrom(value).BuildPartial();
        } else {
          result.a1003Req_ = value;
        }
        result.hasA1003Req = true;
        return this;
      }
      public Builder ClearA1003Req() {
        PrepareBuilder();
        result.hasA1003Req = false;
        result.a1003Req_ = null;
        return this;
      }

      public bool HasA1006Req {
       get { return result.hasA1006Req; }
      }
      public global::DolphinServer.ProtoEntity.A1006Response A1006Req {
        get { return result.A1006Req; }
        set { SetA1006Req(value); }
      }
      public Builder SetA1006Req(global::DolphinServer.ProtoEntity.A1006Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasA1006Req = true;
        result.a1006Req_ = value;
        return this;
      }
      public Builder SetA1006Req(global::DolphinServer.ProtoEntity.A1006Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasA1006Req = true;
        result.a1006Req_ = builderForValue.Build();
        return this;
      }
      public Builder MergeA1006Req(global::DolphinServer.ProtoEntity.A1006Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasA1006Req &&
            result.a1006Req_ != global::DolphinServer.ProtoEntity.A1006Response.DefaultInstance) {
            result.a1006Req_ = global::DolphinServer.ProtoEntity.A1006Response.CreateBuilder(result.a1006Req_).MergeFrom(value).BuildPartial();
        } else {
          result.a1006Req_ = value;
        }
        result.hasA1006Req = true;
        return this;
      }
      public Builder ClearA1006Req() {
        PrepareBuilder();
        result.hasA1006Req = false;
        result.a1006Req_ = null;
        return this;
      }

      public bool HasRoomID {
        get { return result.hasRoomID; }
      }
      public int RoomID {
        get { return result.RoomID; }
        set { SetRoomID(value); }
      }
      public Builder SetRoomID(int value) {
        PrepareBuilder();
        result.hasRoomID = true;
        result.roomID_ = value;
        return this;
      }
      public Builder ClearRoomID() {
        PrepareBuilder();
        result.hasRoomID = false;
        result.roomID_ = 0;
        return this;
      }

      public bool HasRoomType {
        get { return result.hasRoomType; }
      }
      public int RoomType {
        get { return result.RoomType; }
        set { SetRoomType(value); }
      }
      public Builder SetRoomType(int value) {
        PrepareBuilder();
        result.hasRoomType = true;
        result.roomType_ = value;
        return this;
      }
      public Builder ClearRoomType() {
        PrepareBuilder();
        result.hasRoomType = false;
        result.roomType_ = 0;
        return this;
      }
    }
    static A1003AndA1006Response() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class A1006Response : pb::GeneratedMessage<A1006Response, A1006Response.Builder> {
    private A1006Response() { }
    private static readonly A1006Response defaultInstance = new A1006Response().MakeReadOnly();
    private static readonly string[] _a1006ResponseFieldNames = new string[] { "JuShu", "Users", "Zhangshu", "ZhuangUid" };
    private static readonly uint[] _a1006ResponseFieldTags = new uint[] { 24, 10, 32, 18 };
    public static A1006Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override A1006Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override A1006Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1006Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<A1006Response, A1006Response.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1006Response__FieldAccessorTable; }
    }

    public const int UsersFieldNumber = 1;
    private pbc::PopsicleList<global::DolphinServer.ProtoEntity.Player> users_ = new pbc::PopsicleList<global::DolphinServer.ProtoEntity.Player>();
    public scg::IList<global::DolphinServer.ProtoEntity.Player> UsersList {
      get { return users_; }
    }
    public int UsersCount {
      get { return users_.Count; }
    }
    public global::DolphinServer.ProtoEntity.Player GetUsers(int index) {
      return users_[index];
    }

    public const int ZhuangUidFieldNumber = 2;
    private bool hasZhuangUid;
    private string zhuangUid_ = "";
    public bool HasZhuangUid {
      get { return hasZhuangUid; }
    }
    public string ZhuangUid {
      get { return zhuangUid_; }
    }

    public const int JuShuFieldNumber = 3;
    private bool hasJuShu;
    private int juShu_;
    public bool HasJuShu {
      get { return hasJuShu; }
    }
    public int JuShu {
      get { return juShu_; }
    }

    public const int ZhangshuFieldNumber = 4;
    private bool hasZhangshu;
    private int zhangshu_;
    public bool HasZhangshu {
      get { return hasZhangshu; }
    }
    public int Zhangshu {
      get { return zhangshu_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _a1006ResponseFieldNames;
      if (users_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], users_);
      }
      if (hasZhuangUid) {
        output.WriteString(2, field_names[3], ZhuangUid);
      }
      if (hasJuShu) {
        output.WriteInt32(3, field_names[0], JuShu);
      }
      if (hasZhangshu) {
        output.WriteInt32(4, field_names[2], Zhangshu);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::DolphinServer.ProtoEntity.Player element in UsersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasZhuangUid) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ZhuangUid);
      }
      if (hasJuShu) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, JuShu);
      }
      if (hasZhangshu) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Zhangshu);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static A1006Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1006Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1006Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1006Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1006Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1006Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static A1006Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static A1006Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static A1006Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1006Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private A1006Response MakeReadOnly() {
      users_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(A1006Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<A1006Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(A1006Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private A1006Response result;

      private A1006Response PrepareBuilder() {
        if (resultIsReadOnly) {
          A1006Response original = result;
          result = new A1006Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override A1006Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.A1006Response.Descriptor; }
      }

      public override A1006Response DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.A1006Response.DefaultInstance; }
      }

      public override A1006Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is A1006Response) {
          return MergeFrom((A1006Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(A1006Response other) {
        if (other == global::DolphinServer.ProtoEntity.A1006Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.users_.Count != 0) {
          result.users_.Add(other.users_);
        }
        if (other.HasZhuangUid) {
          ZhuangUid = other.ZhuangUid;
        }
        if (other.HasJuShu) {
          JuShu = other.JuShu;
        }
        if (other.HasZhangshu) {
          Zhangshu = other.Zhangshu;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_a1006ResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _a1006ResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.users_, global::DolphinServer.ProtoEntity.Player.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              result.hasZhuangUid = input.ReadString(ref result.zhuangUid_);
              break;
            }
            case 24: {
              result.hasJuShu = input.ReadInt32(ref result.juShu_);
              break;
            }
            case 32: {
              result.hasZhangshu = input.ReadInt32(ref result.zhangshu_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::DolphinServer.ProtoEntity.Player> UsersList {
        get { return PrepareBuilder().users_; }
      }
      public int UsersCount {
        get { return result.UsersCount; }
      }
      public global::DolphinServer.ProtoEntity.Player GetUsers(int index) {
        return result.GetUsers(index);
      }
      public Builder SetUsers(int index, global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_[index] = value;
        return this;
      }
      public Builder SetUsers(int index, global::DolphinServer.ProtoEntity.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUsers(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_.Add(value);
        return this;
      }
      public Builder AddUsers(global::DolphinServer.ProtoEntity.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUsers(scg::IEnumerable<global::DolphinServer.ProtoEntity.Player> values) {
        PrepareBuilder();
        result.users_.Add(values);
        return this;
      }
      public Builder ClearUsers() {
        PrepareBuilder();
        result.users_.Clear();
        return this;
      }

      public bool HasZhuangUid {
        get { return result.hasZhuangUid; }
      }
      public string ZhuangUid {
        get { return result.ZhuangUid; }
        set { SetZhuangUid(value); }
      }
      public Builder SetZhuangUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZhuangUid = true;
        result.zhuangUid_ = value;
        return this;
      }
      public Builder ClearZhuangUid() {
        PrepareBuilder();
        result.hasZhuangUid = false;
        result.zhuangUid_ = "";
        return this;
      }

      public bool HasJuShu {
        get { return result.hasJuShu; }
      }
      public int JuShu {
        get { return result.JuShu; }
        set { SetJuShu(value); }
      }
      public Builder SetJuShu(int value) {
        PrepareBuilder();
        result.hasJuShu = true;
        result.juShu_ = value;
        return this;
      }
      public Builder ClearJuShu() {
        PrepareBuilder();
        result.hasJuShu = false;
        result.juShu_ = 0;
        return this;
      }

      public bool HasZhangshu {
        get { return result.hasZhangshu; }
      }
      public int Zhangshu {
        get { return result.Zhangshu; }
        set { SetZhangshu(value); }
      }
      public Builder SetZhangshu(int value) {
        PrepareBuilder();
        result.hasZhangshu = true;
        result.zhangshu_ = value;
        return this;
      }
      public Builder ClearZhangshu() {
        PrepareBuilder();
        result.hasZhangshu = false;
        result.zhangshu_ = 0;
        return this;
      }
    }
    static A1006Response() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class A1003Response : pb::GeneratedMessage<A1003Response, A1003Response.Builder> {
    private A1003Response() { }
    private static readonly A1003Response defaultInstance = new A1003Response().MakeReadOnly();
    private static readonly string[] _a1003ResponseFieldNames = new string[] { "RoomID", "RoomType", "Users" };
    private static readonly uint[] _a1003ResponseFieldTags = new uint[] { 32, 40, 26 };
    public static A1003Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override A1003Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override A1003Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1003Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<A1003Response, A1003Response.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1003Response__FieldAccessorTable; }
    }

    public const int UsersFieldNumber = 3;
    private pbc::PopsicleList<global::DolphinServer.ProtoEntity.A1003User> users_ = new pbc::PopsicleList<global::DolphinServer.ProtoEntity.A1003User>();
    public scg::IList<global::DolphinServer.ProtoEntity.A1003User> UsersList {
      get { return users_; }
    }
    public int UsersCount {
      get { return users_.Count; }
    }
    public global::DolphinServer.ProtoEntity.A1003User GetUsers(int index) {
      return users_[index];
    }

    public const int RoomIDFieldNumber = 4;
    private bool hasRoomID;
    private int roomID_;
    public bool HasRoomID {
      get { return hasRoomID; }
    }
    public int RoomID {
      get { return roomID_; }
    }

    public const int RoomTypeFieldNumber = 5;
    private bool hasRoomType;
    private int roomType_;
    public bool HasRoomType {
      get { return hasRoomType; }
    }
    public int RoomType {
      get { return roomType_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _a1003ResponseFieldNames;
      if (users_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], users_);
      }
      if (hasRoomID) {
        output.WriteInt32(4, field_names[0], RoomID);
      }
      if (hasRoomType) {
        output.WriteInt32(5, field_names[1], RoomType);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      foreach (global::DolphinServer.ProtoEntity.A1003User element in UsersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasRoomID) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, RoomID);
      }
      if (hasRoomType) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, RoomType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static A1003Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1003Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1003Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1003Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1003Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1003Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static A1003Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static A1003Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static A1003Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1003Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private A1003Response MakeReadOnly() {
      users_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(A1003Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<A1003Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(A1003Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private A1003Response result;

      private A1003Response PrepareBuilder() {
        if (resultIsReadOnly) {
          A1003Response original = result;
          result = new A1003Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override A1003Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.A1003Response.Descriptor; }
      }

      public override A1003Response DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.A1003Response.DefaultInstance; }
      }

      public override A1003Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is A1003Response) {
          return MergeFrom((A1003Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(A1003Response other) {
        if (other == global::DolphinServer.ProtoEntity.A1003Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.users_.Count != 0) {
          result.users_.Add(other.users_);
        }
        if (other.HasRoomID) {
          RoomID = other.RoomID;
        }
        if (other.HasRoomType) {
          RoomType = other.RoomType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_a1003ResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _a1003ResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.users_, global::DolphinServer.ProtoEntity.A1003User.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasRoomID = input.ReadInt32(ref result.roomID_);
              break;
            }
            case 40: {
              result.hasRoomType = input.ReadInt32(ref result.roomType_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<global::DolphinServer.ProtoEntity.A1003User> UsersList {
        get { return PrepareBuilder().users_; }
      }
      public int UsersCount {
        get { return result.UsersCount; }
      }
      public global::DolphinServer.ProtoEntity.A1003User GetUsers(int index) {
        return result.GetUsers(index);
      }
      public Builder SetUsers(int index, global::DolphinServer.ProtoEntity.A1003User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_[index] = value;
        return this;
      }
      public Builder SetUsers(int index, global::DolphinServer.ProtoEntity.A1003User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUsers(global::DolphinServer.ProtoEntity.A1003User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_.Add(value);
        return this;
      }
      public Builder AddUsers(global::DolphinServer.ProtoEntity.A1003User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUsers(scg::IEnumerable<global::DolphinServer.ProtoEntity.A1003User> values) {
        PrepareBuilder();
        result.users_.Add(values);
        return this;
      }
      public Builder ClearUsers() {
        PrepareBuilder();
        result.users_.Clear();
        return this;
      }

      public bool HasRoomID {
        get { return result.hasRoomID; }
      }
      public int RoomID {
        get { return result.RoomID; }
        set { SetRoomID(value); }
      }
      public Builder SetRoomID(int value) {
        PrepareBuilder();
        result.hasRoomID = true;
        result.roomID_ = value;
        return this;
      }
      public Builder ClearRoomID() {
        PrepareBuilder();
        result.hasRoomID = false;
        result.roomID_ = 0;
        return this;
      }

      public bool HasRoomType {
        get { return result.hasRoomType; }
      }
      public int RoomType {
        get { return result.RoomType; }
        set { SetRoomType(value); }
      }
      public Builder SetRoomType(int value) {
        PrepareBuilder();
        result.hasRoomType = true;
        result.roomType_ = value;
        return this;
      }
      public Builder ClearRoomType() {
        PrepareBuilder();
        result.hasRoomType = false;
        result.roomType_ = 0;
        return this;
      }
    }
    static A1003Response() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class A1003User : pb::GeneratedMessage<A1003User, A1003User.Builder> {
    private A1003User() { }
    private static readonly A1003User defaultInstance = new A1003User().MakeReadOnly();
    private static readonly string[] _a1003UserFieldNames = new string[] { "HatImage", "IsReady", "Name", "Sex", "Sore", "Uid", "Zhuang" };
    private static readonly uint[] _a1003UserFieldTags = new uint[] { 18, 48, 58, 40, 24, 10, 32 };
    public static A1003User DefaultInstance {
      get { return defaultInstance; }
    }

    public override A1003User DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override A1003User ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1003User__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<A1003User, A1003User.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_A1003User__FieldAccessorTable; }
    }

    public const int UidFieldNumber = 1;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }

    public const int HatImageFieldNumber = 2;
    private bool hasHatImage;
    private string hatImage_ = "";
    public bool HasHatImage {
      get { return hasHatImage; }
    }
    public string HatImage {
      get { return hatImage_; }
    }

    public const int SoreFieldNumber = 3;
    private bool hasSore;
    private int sore_;
    public bool HasSore {
      get { return hasSore; }
    }
    public int Sore {
      get { return sore_; }
    }

    public const int ZhuangFieldNumber = 4;
    private bool hasZhuang;
    private int zhuang_;
    public bool HasZhuang {
      get { return hasZhuang; }
    }
    public int Zhuang {
      get { return zhuang_; }
    }

    public const int SexFieldNumber = 5;
    private bool hasSex;
    private int sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    public int Sex {
      get { return sex_; }
    }

    public const int IsReadyFieldNumber = 6;
    private bool hasIsReady;
    private int isReady_;
    public bool HasIsReady {
      get { return hasIsReady; }
    }
    public int IsReady {
      get { return isReady_; }
    }

    public const int NameFieldNumber = 7;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _a1003UserFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[5], Uid);
      }
      if (hasHatImage) {
        output.WriteString(2, field_names[0], HatImage);
      }
      if (hasSore) {
        output.WriteInt32(3, field_names[4], Sore);
      }
      if (hasZhuang) {
        output.WriteInt32(4, field_names[6], Zhuang);
      }
      if (hasSex) {
        output.WriteInt32(5, field_names[3], Sex);
      }
      if (hasIsReady) {
        output.WriteInt32(6, field_names[1], IsReady);
      }
      if (hasName) {
        output.WriteString(7, field_names[2], Name);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
      }
      if (hasHatImage) {
        size += pb::CodedOutputStream.ComputeStringSize(2, HatImage);
      }
      if (hasSore) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Sore);
      }
      if (hasZhuang) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Zhuang);
      }
      if (hasSex) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Sex);
      }
      if (hasIsReady) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, IsReady);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(7, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static A1003User ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1003User ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1003User ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1003User ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1003User ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1003User ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static A1003User ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static A1003User ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static A1003User ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1003User ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private A1003User MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(A1003User prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<A1003User, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(A1003User cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private A1003User result;

      private A1003User PrepareBuilder() {
        if (resultIsReadOnly) {
          A1003User original = result;
          result = new A1003User();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override A1003User MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.A1003User.Descriptor; }
      }

      public override A1003User DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.A1003User.DefaultInstance; }
      }

      public override A1003User BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is A1003User) {
          return MergeFrom((A1003User) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(A1003User other) {
        if (other == global::DolphinServer.ProtoEntity.A1003User.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasHatImage) {
          HatImage = other.HatImage;
        }
        if (other.HasSore) {
          Sore = other.Sore;
        }
        if (other.HasZhuang) {
          Zhuang = other.Zhuang;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasIsReady) {
          IsReady = other.IsReady;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_a1003UserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _a1003UserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 18: {
              result.hasHatImage = input.ReadString(ref result.hatImage_);
              break;
            }
            case 24: {
              result.hasSore = input.ReadInt32(ref result.sore_);
              break;
            }
            case 32: {
              result.hasZhuang = input.ReadInt32(ref result.zhuang_);
              break;
            }
            case 40: {
              result.hasSex = input.ReadInt32(ref result.sex_);
              break;
            }
            case 48: {
              result.hasIsReady = input.ReadInt32(ref result.isReady_);
              break;
            }
            case 58: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }

      public bool HasHatImage {
        get { return result.hasHatImage; }
      }
      public string HatImage {
        get { return result.HatImage; }
        set { SetHatImage(value); }
      }
      public Builder SetHatImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHatImage = true;
        result.hatImage_ = value;
        return this;
      }
      public Builder ClearHatImage() {
        PrepareBuilder();
        result.hasHatImage = false;
        result.hatImage_ = "";
        return this;
      }

      public bool HasSore {
        get { return result.hasSore; }
      }
      public int Sore {
        get { return result.Sore; }
        set { SetSore(value); }
      }
      public Builder SetSore(int value) {
        PrepareBuilder();
        result.hasSore = true;
        result.sore_ = value;
        return this;
      }
      public Builder ClearSore() {
        PrepareBuilder();
        result.hasSore = false;
        result.sore_ = 0;
        return this;
      }

      public bool HasZhuang {
        get { return result.hasZhuang; }
      }
      public int Zhuang {
        get { return result.Zhuang; }
        set { SetZhuang(value); }
      }
      public Builder SetZhuang(int value) {
        PrepareBuilder();
        result.hasZhuang = true;
        result.zhuang_ = value;
        return this;
      }
      public Builder ClearZhuang() {
        PrepareBuilder();
        result.hasZhuang = false;
        result.zhuang_ = 0;
        return this;
      }

      public bool HasSex {
        get { return result.hasSex; }
      }
      public int Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(int value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }

      public bool HasIsReady {
        get { return result.hasIsReady; }
      }
      public int IsReady {
        get { return result.IsReady; }
        set { SetIsReady(value); }
      }
      public Builder SetIsReady(int value) {
        PrepareBuilder();
        result.hasIsReady = true;
        result.isReady_ = value;
        return this;
      }
      public Builder ClearIsReady() {
        PrepareBuilder();
        result.hasIsReady = false;
        result.isReady_ = 0;
        return this;
      }

      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static A1003User() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Player : pb::GeneratedMessage<Player, Player.Builder> {
    private Player() { }
    private static readonly Player defaultInstance = new Player().MakeReadOnly();
    private static readonly string[] _playerFieldNames = new string[] { "Card", "Score", "Uid" };
    private static readonly uint[] _playerFieldTags = new uint[] { 8, 16, 26 };
    public static Player DefaultInstance {
      get { return defaultInstance; }
    }

    public override Player DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Player ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_Player__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Player, Player.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.internal__static_Player__FieldAccessorTable; }
    }

    public const int CardFieldNumber = 1;
    private pbc::PopsicleList<int> card_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CardList {
      get { return pbc::Lists.AsReadOnly(card_); }
    }
    public int CardCount {
      get { return card_.Count; }
    }
    public int GetCard(int index) {
      return card_[index];
    }

    public const int ScoreFieldNumber = 2;
    private bool hasScore;
    private int score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public int Score {
      get { return score_; }
    }

    public const int UidFieldNumber = 3;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _playerFieldNames;
      if (card_.Count > 0) {
        output.WriteInt32Array(1, field_names[0], card_);
      }
      if (hasScore) {
        output.WriteInt32(2, field_names[1], Score);
      }
      if (hasUid) {
        output.WriteString(3, field_names[2], Uid);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        foreach (int element in CardList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * card_.Count;
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Score);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Uid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Player ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Player MakeReadOnly() {
      card_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Player prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Player, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Player cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Player result;

      private Player PrepareBuilder() {
        if (resultIsReadOnly) {
          Player original = result;
          result = new Player();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Player MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.Player.Descriptor; }
      }

      public override Player DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.Player.DefaultInstance; }
      }

      public override Player BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Player) {
          return MergeFrom((Player) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Player other) {
        if (other == global::DolphinServer.ProtoEntity.Player.DefaultInstance) return this;
        PrepareBuilder();
        if (other.card_.Count != 0) {
          result.card_.Add(other.card_);
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.card_);
              break;
            }
            case 16: {
              result.hasScore = input.ReadInt32(ref result.score_);
              break;
            }
            case 26: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<int> CardList {
        get { return PrepareBuilder().card_; }
      }
      public int CardCount {
        get { return result.CardCount; }
      }
      public int GetCard(int index) {
        return result.GetCard(index);
      }
      public Builder SetCard(int index, int value) {
        PrepareBuilder();
        result.card_[index] = value;
        return this;
      }
      public Builder AddCard(int value) {
        PrepareBuilder();
        result.card_.Add(value);
        return this;
      }
      public Builder AddRangeCard(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.card_.Add(values);
        return this;
      }
      public Builder ClearCard() {
        PrepareBuilder();
        result.card_.Clear();
        return this;
      }

      public bool HasScore {
        get { return result.hasScore; }
      }
      public int Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(int value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }

      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
    }
    static Player() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1003AndA1006Response.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
