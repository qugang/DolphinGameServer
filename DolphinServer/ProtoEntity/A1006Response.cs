// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: A1006Response.txt
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace DolphinServer.ProtoEntity {

  namespace Proto {

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class A1006Response {

      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_A1006Response__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1006Response, global::DolphinServer.ProtoEntity.A1006Response.Builder> internal__static_A1006Response__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_Player__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.Player, global::DolphinServer.ProtoEntity.Player.Builder> internal__static_Player__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;

      static A1006Response() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChFBMTAwNlJlc3BvbnNlLnR4dCLRAQoNQTEwMDZSZXNwb25zZRIRCglFcnJv", 
              "ckluZm8YASABKAkSEQoJRXJyb3JDb2RlGAIgASgFEhgKB1BsYXllcjEYAyAB", 
              "KAsyBy5QbGF5ZXISGAoHUGxheWVyMhgEIAEoCzIHLlBsYXllchIYCgdQbGF5", 
              "ZXIzGAUgASgLMgcuUGxheWVyEhgKB1BsYXllcjQYBiABKAsyBy5QbGF5ZXIS", 
              "EQoJWmh1YW5nVWlkGAcgASgJEg0KBUp1U2h1GAggASgFEhAKCFpoYW5nc2h1", 
              "GAkgASgFIiUKBlBsYXllchIMCgRDYXJkGAEgAygFEg0KBVNjb3JlGAIgASgF", 
            "QhyqAhlEb2xwaGluU2VydmVyLlByb3RvRW50aXR5"));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_A1006Response__Descriptor = Descriptor.MessageTypes[0];
          internal__static_A1006Response__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.A1006Response, global::DolphinServer.ProtoEntity.A1006Response.Builder>(internal__static_A1006Response__Descriptor,
                  new string[] { "ErrorInfo", "ErrorCode", "Player1", "Player2", "Player3", "Player4", "ZhuangUid", "JuShu", "Zhangshu", });
          internal__static_Player__Descriptor = Descriptor.MessageTypes[1];
          internal__static_Player__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::DolphinServer.ProtoEntity.Player, global::DolphinServer.ProtoEntity.Player.Builder>(internal__static_Player__Descriptor,
                  new string[] { "Card", "Score", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion

    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class A1006Response : pb::GeneratedMessage<A1006Response, A1006Response.Builder> {
    private A1006Response() { }
    private static readonly A1006Response defaultInstance = new A1006Response().MakeReadOnly();
    private static readonly string[] _a1006ResponseFieldNames = new string[] { "ErrorCode", "ErrorInfo", "JuShu", "Player1", "Player2", "Player3", "Player4", "Zhangshu", "ZhuangUid" };
    private static readonly uint[] _a1006ResponseFieldTags = new uint[] { 16, 10, 64, 26, 34, 42, 50, 72, 58 };
    public static A1006Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override A1006Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override A1006Response ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1006Response.internal__static_A1006Response__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<A1006Response, A1006Response.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1006Response.internal__static_A1006Response__FieldAccessorTable; }
    }

    public const int ErrorInfoFieldNumber = 1;
    private bool hasErrorInfo;
    private string errorInfo_ = "";
    public bool HasErrorInfo {
      get { return hasErrorInfo; }
    }
    public string ErrorInfo {
      get { return errorInfo_; }
    }

    public const int ErrorCodeFieldNumber = 2;
    private bool hasErrorCode;
    private int errorCode_;
    public bool HasErrorCode {
      get { return hasErrorCode; }
    }
    public int ErrorCode {
      get { return errorCode_; }
    }

    public const int Player1FieldNumber = 3;
    private bool hasPlayer1;
    private global::DolphinServer.ProtoEntity.Player player1_;
    public bool HasPlayer1 {
      get { return hasPlayer1; }
    }
    public global::DolphinServer.ProtoEntity.Player Player1 {
      get { return player1_ ?? global::DolphinServer.ProtoEntity.Player.DefaultInstance; }
    }

    public const int Player2FieldNumber = 4;
    private bool hasPlayer2;
    private global::DolphinServer.ProtoEntity.Player player2_;
    public bool HasPlayer2 {
      get { return hasPlayer2; }
    }
    public global::DolphinServer.ProtoEntity.Player Player2 {
      get { return player2_ ?? global::DolphinServer.ProtoEntity.Player.DefaultInstance; }
    }

    public const int Player3FieldNumber = 5;
    private bool hasPlayer3;
    private global::DolphinServer.ProtoEntity.Player player3_;
    public bool HasPlayer3 {
      get { return hasPlayer3; }
    }
    public global::DolphinServer.ProtoEntity.Player Player3 {
      get { return player3_ ?? global::DolphinServer.ProtoEntity.Player.DefaultInstance; }
    }

    public const int Player4FieldNumber = 6;
    private bool hasPlayer4;
    private global::DolphinServer.ProtoEntity.Player player4_;
    public bool HasPlayer4 {
      get { return hasPlayer4; }
    }
    public global::DolphinServer.ProtoEntity.Player Player4 {
      get { return player4_ ?? global::DolphinServer.ProtoEntity.Player.DefaultInstance; }
    }

    public const int ZhuangUidFieldNumber = 7;
    private bool hasZhuangUid;
    private string zhuangUid_ = "";
    public bool HasZhuangUid {
      get { return hasZhuangUid; }
    }
    public string ZhuangUid {
      get { return zhuangUid_; }
    }

    public const int JuShuFieldNumber = 8;
    private bool hasJuShu;
    private int juShu_;
    public bool HasJuShu {
      get { return hasJuShu; }
    }
    public int JuShu {
      get { return juShu_; }
    }

    public const int ZhangshuFieldNumber = 9;
    private bool hasZhangshu;
    private int zhangshu_;
    public bool HasZhangshu {
      get { return hasZhangshu; }
    }
    public int Zhangshu {
      get { return zhangshu_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _a1006ResponseFieldNames;
      if (hasErrorInfo) {
        output.WriteString(1, field_names[1], ErrorInfo);
      }
      if (hasErrorCode) {
        output.WriteInt32(2, field_names[0], ErrorCode);
      }
      if (hasPlayer1) {
        output.WriteMessage(3, field_names[3], Player1);
      }
      if (hasPlayer2) {
        output.WriteMessage(4, field_names[4], Player2);
      }
      if (hasPlayer3) {
        output.WriteMessage(5, field_names[5], Player3);
      }
      if (hasPlayer4) {
        output.WriteMessage(6, field_names[6], Player4);
      }
      if (hasZhuangUid) {
        output.WriteString(7, field_names[8], ZhuangUid);
      }
      if (hasJuShu) {
        output.WriteInt32(8, field_names[2], JuShu);
      }
      if (hasZhangshu) {
        output.WriteInt32(9, field_names[7], Zhangshu);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasErrorInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ErrorInfo);
      }
      if (hasErrorCode) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ErrorCode);
      }
      if (hasPlayer1) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Player1);
      }
      if (hasPlayer2) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Player2);
      }
      if (hasPlayer3) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Player3);
      }
      if (hasPlayer4) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Player4);
      }
      if (hasZhuangUid) {
        size += pb::CodedOutputStream.ComputeStringSize(7, ZhuangUid);
      }
      if (hasJuShu) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, JuShu);
      }
      if (hasZhangshu) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Zhangshu);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static A1006Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1006Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1006Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static A1006Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static A1006Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1006Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static A1006Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static A1006Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static A1006Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static A1006Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private A1006Response MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(A1006Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<A1006Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(A1006Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private A1006Response result;

      private A1006Response PrepareBuilder() {
        if (resultIsReadOnly) {
          A1006Response original = result;
          result = new A1006Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override A1006Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.A1006Response.Descriptor; }
      }

      public override A1006Response DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.A1006Response.DefaultInstance; }
      }

      public override A1006Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is A1006Response) {
          return MergeFrom((A1006Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(A1006Response other) {
        if (other == global::DolphinServer.ProtoEntity.A1006Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorInfo) {
          ErrorInfo = other.ErrorInfo;
        }
        if (other.HasErrorCode) {
          ErrorCode = other.ErrorCode;
        }
        if (other.HasPlayer1) {
          MergePlayer1(other.Player1);
        }
        if (other.HasPlayer2) {
          MergePlayer2(other.Player2);
        }
        if (other.HasPlayer3) {
          MergePlayer3(other.Player3);
        }
        if (other.HasPlayer4) {
          MergePlayer4(other.Player4);
        }
        if (other.HasZhuangUid) {
          ZhuangUid = other.ZhuangUid;
        }
        if (other.HasJuShu) {
          JuShu = other.JuShu;
        }
        if (other.HasZhangshu) {
          Zhangshu = other.Zhangshu;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_a1006ResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _a1006ResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasErrorInfo = input.ReadString(ref result.errorInfo_);
              break;
            }
            case 16: {
              result.hasErrorCode = input.ReadInt32(ref result.errorCode_);
              break;
            }
            case 26: {
              global::DolphinServer.ProtoEntity.Player.Builder subBuilder = global::DolphinServer.ProtoEntity.Player.CreateBuilder();
              if (result.hasPlayer1) {
                subBuilder.MergeFrom(Player1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player1 = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::DolphinServer.ProtoEntity.Player.Builder subBuilder = global::DolphinServer.ProtoEntity.Player.CreateBuilder();
              if (result.hasPlayer2) {
                subBuilder.MergeFrom(Player2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player2 = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::DolphinServer.ProtoEntity.Player.Builder subBuilder = global::DolphinServer.ProtoEntity.Player.CreateBuilder();
              if (result.hasPlayer3) {
                subBuilder.MergeFrom(Player3);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player3 = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::DolphinServer.ProtoEntity.Player.Builder subBuilder = global::DolphinServer.ProtoEntity.Player.CreateBuilder();
              if (result.hasPlayer4) {
                subBuilder.MergeFrom(Player4);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player4 = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              result.hasZhuangUid = input.ReadString(ref result.zhuangUid_);
              break;
            }
            case 64: {
              result.hasJuShu = input.ReadInt32(ref result.juShu_);
              break;
            }
            case 72: {
              result.hasZhangshu = input.ReadInt32(ref result.zhangshu_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public bool HasErrorInfo {
        get { return result.hasErrorInfo; }
      }
      public string ErrorInfo {
        get { return result.ErrorInfo; }
        set { SetErrorInfo(value); }
      }
      public Builder SetErrorInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorInfo = true;
        result.errorInfo_ = value;
        return this;
      }
      public Builder ClearErrorInfo() {
        PrepareBuilder();
        result.hasErrorInfo = false;
        result.errorInfo_ = "";
        return this;
      }

      public bool HasErrorCode {
        get { return result.hasErrorCode; }
      }
      public int ErrorCode {
        get { return result.ErrorCode; }
        set { SetErrorCode(value); }
      }
      public Builder SetErrorCode(int value) {
        PrepareBuilder();
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder ClearErrorCode() {
        PrepareBuilder();
        result.hasErrorCode = false;
        result.errorCode_ = 0;
        return this;
      }

      public bool HasPlayer1 {
       get { return result.hasPlayer1; }
      }
      public global::DolphinServer.ProtoEntity.Player Player1 {
        get { return result.Player1; }
        set { SetPlayer1(value); }
      }
      public Builder SetPlayer1(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer1 = true;
        result.player1_ = value;
        return this;
      }
      public Builder SetPlayer1(global::DolphinServer.ProtoEntity.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer1 = true;
        result.player1_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer1(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer1 &&
            result.player1_ != global::DolphinServer.ProtoEntity.Player.DefaultInstance) {
            result.player1_ = global::DolphinServer.ProtoEntity.Player.CreateBuilder(result.player1_).MergeFrom(value).BuildPartial();
        } else {
          result.player1_ = value;
        }
        result.hasPlayer1 = true;
        return this;
      }
      public Builder ClearPlayer1() {
        PrepareBuilder();
        result.hasPlayer1 = false;
        result.player1_ = null;
        return this;
      }

      public bool HasPlayer2 {
       get { return result.hasPlayer2; }
      }
      public global::DolphinServer.ProtoEntity.Player Player2 {
        get { return result.Player2; }
        set { SetPlayer2(value); }
      }
      public Builder SetPlayer2(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer2 = true;
        result.player2_ = value;
        return this;
      }
      public Builder SetPlayer2(global::DolphinServer.ProtoEntity.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer2 = true;
        result.player2_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer2(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer2 &&
            result.player2_ != global::DolphinServer.ProtoEntity.Player.DefaultInstance) {
            result.player2_ = global::DolphinServer.ProtoEntity.Player.CreateBuilder(result.player2_).MergeFrom(value).BuildPartial();
        } else {
          result.player2_ = value;
        }
        result.hasPlayer2 = true;
        return this;
      }
      public Builder ClearPlayer2() {
        PrepareBuilder();
        result.hasPlayer2 = false;
        result.player2_ = null;
        return this;
      }

      public bool HasPlayer3 {
       get { return result.hasPlayer3; }
      }
      public global::DolphinServer.ProtoEntity.Player Player3 {
        get { return result.Player3; }
        set { SetPlayer3(value); }
      }
      public Builder SetPlayer3(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer3 = true;
        result.player3_ = value;
        return this;
      }
      public Builder SetPlayer3(global::DolphinServer.ProtoEntity.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer3 = true;
        result.player3_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer3(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer3 &&
            result.player3_ != global::DolphinServer.ProtoEntity.Player.DefaultInstance) {
            result.player3_ = global::DolphinServer.ProtoEntity.Player.CreateBuilder(result.player3_).MergeFrom(value).BuildPartial();
        } else {
          result.player3_ = value;
        }
        result.hasPlayer3 = true;
        return this;
      }
      public Builder ClearPlayer3() {
        PrepareBuilder();
        result.hasPlayer3 = false;
        result.player3_ = null;
        return this;
      }

      public bool HasPlayer4 {
       get { return result.hasPlayer4; }
      }
      public global::DolphinServer.ProtoEntity.Player Player4 {
        get { return result.Player4; }
        set { SetPlayer4(value); }
      }
      public Builder SetPlayer4(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer4 = true;
        result.player4_ = value;
        return this;
      }
      public Builder SetPlayer4(global::DolphinServer.ProtoEntity.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer4 = true;
        result.player4_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer4(global::DolphinServer.ProtoEntity.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer4 &&
            result.player4_ != global::DolphinServer.ProtoEntity.Player.DefaultInstance) {
            result.player4_ = global::DolphinServer.ProtoEntity.Player.CreateBuilder(result.player4_).MergeFrom(value).BuildPartial();
        } else {
          result.player4_ = value;
        }
        result.hasPlayer4 = true;
        return this;
      }
      public Builder ClearPlayer4() {
        PrepareBuilder();
        result.hasPlayer4 = false;
        result.player4_ = null;
        return this;
      }

      public bool HasZhuangUid {
        get { return result.hasZhuangUid; }
      }
      public string ZhuangUid {
        get { return result.ZhuangUid; }
        set { SetZhuangUid(value); }
      }
      public Builder SetZhuangUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasZhuangUid = true;
        result.zhuangUid_ = value;
        return this;
      }
      public Builder ClearZhuangUid() {
        PrepareBuilder();
        result.hasZhuangUid = false;
        result.zhuangUid_ = "";
        return this;
      }

      public bool HasJuShu {
        get { return result.hasJuShu; }
      }
      public int JuShu {
        get { return result.JuShu; }
        set { SetJuShu(value); }
      }
      public Builder SetJuShu(int value) {
        PrepareBuilder();
        result.hasJuShu = true;
        result.juShu_ = value;
        return this;
      }
      public Builder ClearJuShu() {
        PrepareBuilder();
        result.hasJuShu = false;
        result.juShu_ = 0;
        return this;
      }

      public bool HasZhangshu {
        get { return result.hasZhangshu; }
      }
      public int Zhangshu {
        get { return result.Zhangshu; }
        set { SetZhangshu(value); }
      }
      public Builder SetZhangshu(int value) {
        PrepareBuilder();
        result.hasZhangshu = true;
        result.zhangshu_ = value;
        return this;
      }
      public Builder ClearZhangshu() {
        PrepareBuilder();
        result.hasZhangshu = false;
        result.zhangshu_ = 0;
        return this;
      }
    }
    static A1006Response() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1006Response.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Player : pb::GeneratedMessage<Player, Player.Builder> {
    private Player() { }
    private static readonly Player defaultInstance = new Player().MakeReadOnly();
    private static readonly string[] _playerFieldNames = new string[] { "Card", "Score" };
    private static readonly uint[] _playerFieldTags = new uint[] { 8, 16 };
    public static Player DefaultInstance {
      get { return defaultInstance; }
    }

    public override Player DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Player ThisMessage {
      get { return this; }
    }

    public static pbd::MessageDescriptor Descriptor {
      get { return global::DolphinServer.ProtoEntity.Proto.A1006Response.internal__static_Player__Descriptor; }
    }

    protected override pb::FieldAccess.FieldAccessorTable<Player, Player.Builder> InternalFieldAccessors {
      get { return global::DolphinServer.ProtoEntity.Proto.A1006Response.internal__static_Player__FieldAccessorTable; }
    }

    public const int CardFieldNumber = 1;
    private pbc::PopsicleList<int> card_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CardList {
      get { return pbc::Lists.AsReadOnly(card_); }
    }
    public int CardCount {
      get { return card_.Count; }
    }
    public int GetCard(int index) {
      return card_[index];
    }

    public const int ScoreFieldNumber = 2;
    private bool hasScore;
    private int score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public int Score {
      get { return score_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _playerFieldNames;
      if (card_.Count > 0) {
        output.WriteInt32Array(1, field_names[0], card_);
      }
      if (hasScore) {
        output.WriteInt32(2, field_names[1], Score);
      }
      UnknownFields.WriteTo(output);
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        foreach (int element in CardList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * card_.Count;
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Score);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Player ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Player MakeReadOnly() {
      card_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Player prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Player, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Player cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Player result;

      private Player PrepareBuilder() {
        if (resultIsReadOnly) {
          Player original = result;
          result = new Player();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Player MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DolphinServer.ProtoEntity.Player.Descriptor; }
      }

      public override Player DefaultInstanceForType {
        get { return global::DolphinServer.ProtoEntity.Player.DefaultInstance; }
      }

      public override Player BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Player) {
          return MergeFrom((Player) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Player other) {
        if (other == global::DolphinServer.ProtoEntity.Player.DefaultInstance) return this;
        PrepareBuilder();
        if (other.card_.Count != 0) {
          result.card_.Add(other.card_);
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.card_);
              break;
            }
            case 16: {
              result.hasScore = input.ReadInt32(ref result.score_);
              break;
            }
          }
        }

        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }


      public pbc::IPopsicleList<int> CardList {
        get { return PrepareBuilder().card_; }
      }
      public int CardCount {
        get { return result.CardCount; }
      }
      public int GetCard(int index) {
        return result.GetCard(index);
      }
      public Builder SetCard(int index, int value) {
        PrepareBuilder();
        result.card_[index] = value;
        return this;
      }
      public Builder AddCard(int value) {
        PrepareBuilder();
        result.card_.Add(value);
        return this;
      }
      public Builder AddRangeCard(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.card_.Add(values);
        return this;
      }
      public Builder ClearCard() {
        PrepareBuilder();
        result.card_.Clear();
        return this;
      }

      public bool HasScore {
        get { return result.hasScore; }
      }
      public int Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(int value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
    }
    static Player() {
      object.ReferenceEquals(global::DolphinServer.ProtoEntity.Proto.A1006Response.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
